{"version":3,"file":"index-f5976f5a.entry.js","sources":["../../../ui/raid/presets.ts","../../../ui/raid/raid_picker.ts","../../../ui/raid/raid_stats.ts","../../../ui/raid/raid_tab.ts","../../../ui/core/components/raid_target_picker.ts","../../../ui/raid/assignments_picker.ts","../../../ui/raid/blessings_picker.ts","../../../ui/raid/tanks_picker.ts","../../../ui/raid/settings_tab.ts","../../../ui/raid/import_export.ts","../../../ui/raid/raid_sim_ui.ts","../../../ui/raid/index.ts"],"sourcesContent":["import { IndividualSimUI, OtherDefaults } from '../core/individual_sim_ui.js';\n\nimport {\n\tClass,\n\tConsumes,\n\tEquipmentSpec,\n\tFaction,\n\tRace,\n\tSpec\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport {\n\tgetSpecIcon,\n\tspecNames,\n\tSpecOptions,\n\tSpecRotation,\n} from '../core/proto_utils/utils.js';\n\nimport { Player } from '../core/player.js';\n\nimport * as TankDeathknightPresets from '../tank_deathknight/presets.js';\nimport * as DeathknightPresets from '../deathknight/presets.js';\nimport * as BalanceDruidPresets from '../balance_druid/presets.js';\nimport * as FeralDruidPresets from '../feral_druid/presets.js';\nimport * as FeralTankDruidPresets from '../feral_tank_druid/presets.js';\nimport * as RestorationDruidPresets from '../restoration_druid/presets.js';\nimport * as ElementalShamanPresets from '../elemental_shaman/presets.js';\nimport * as EnhancementShamanPresets from '../enhancement_shaman/presets.js';\nimport * as RestorationShamanPresets from '../restoration_shaman/presets.js';\nimport * as HunterPresets from '../hunter/presets.js';\nimport * as MagePresets from '../mage/presets.js';\nimport * as RoguePresets from '../rogue/presets.js';\nimport * as HolyPaladinPresets from '../holy_paladin/presets.js';\nimport * as ProtectionPaladinPresets from '../protection_paladin/presets.js';\nimport * as RetributionPaladinPresets from '../retribution_paladin/presets.js';\nimport * as HealingPriestPresets from '../healing_priest/presets.js';\nimport * as ShadowPriestPresets from '../shadow_priest/presets.js';\nimport * as SmitePriestPresets from '../smite_priest/presets.js';\nimport * as WarriorPresets from '../warrior/presets.js';\nimport * as ProtectionWarriorPresets from '../protection_warrior/presets.js';\nimport * as WarlockPresets from '../warlock/presets.js';\n\nimport { TankDeathknightSimUI } from '../tank_deathknight/sim.js';\nimport { DeathknightSimUI } from '../deathknight/sim.js';\nimport { BalanceDruidSimUI } from '../balance_druid/sim.js';\nimport { FeralDruidSimUI } from '../feral_druid/sim.js';\nimport { FeralTankDruidSimUI } from '../feral_tank_druid/sim.js';\nimport { RestorationDruidSimUI } from '../restoration_druid/sim.js';\nimport { ElementalShamanSimUI } from '../elemental_shaman/sim.js';\nimport { EnhancementShamanSimUI } from '../enhancement_shaman/sim.js';\nimport { RestorationShamanSimUI } from '../restoration_shaman/sim.js';\nimport { HunterSimUI } from '../hunter/sim.js';\nimport { MageSimUI } from '../mage/sim.js';\nimport { RogueSimUI } from '../rogue/sim.js';\nimport { HolyPaladinSimUI } from '../holy_paladin/sim.js';\nimport { ProtectionPaladinSimUI } from '../protection_paladin/sim.js';\nimport { RetributionPaladinSimUI } from '../retribution_paladin/sim.js';\nimport { HealingPriestSimUI } from '../healing_priest/sim.js';\nimport { ShadowPriestSimUI } from '../shadow_priest/sim.js';\nimport { SmitePriestSimUI } from '../smite_priest/sim.js';\nimport { WarriorSimUI } from '../warrior/sim.js';\nimport { ProtectionWarriorSimUI } from '../protection_warrior/sim.js';\nimport { WarlockSimUI } from '../warlock/sim.js';\n\nexport const specSimFactories: Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>> = {\n\t[Spec.SpecTankDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new TankDeathknightSimUI(parentElem, player),\n\t[Spec.SpecDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new DeathknightSimUI(parentElem, player),\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralTankDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralTankDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t[Spec.SpecHunter]: (parentElem: HTMLElement, player: Player<any>) => new HunterSimUI(parentElem, player),\n\t[Spec.SpecMage]: (parentElem: HTMLElement, player: Player<any>) => new MageSimUI(parentElem, player),\n\t[Spec.SpecRogue]: (parentElem: HTMLElement, player: Player<any>) => new RogueSimUI(parentElem, player),\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t[Spec.SpecHealingPriest]: (parentElem: HTMLElement, player: Player<any>) => new HealingPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t[Spec.SpecSmitePriest]: (parentElem: HTMLElement, player: Player<any>) => new SmitePriestSimUI(parentElem, player),\n\t[Spec.SpecWarrior]: (parentElem: HTMLElement, player: Player<any>) => new WarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n\t[Spec.SpecWarlock]: (parentElem: HTMLElement, player: Player<any>) => new WarlockSimUI(parentElem, player),\n};\n\n// Configuration necessary for creating new players.\nexport interface PresetSpecSettings<SpecType extends Spec> {\n\tspec: Spec,\n\trotation: SpecRotation<SpecType>,\n\ttalents: SavedTalents,\n\tspecOptions: SpecOptions<SpecType>,\n\tconsumes: Consumes,\n\n\tdefaultName: string,\n\tdefaultFactionRaces: Record<Faction, Race>,\n\tdefaultGear: Record<Faction, Record<number, EquipmentSpec>>,\n\totherDefaults?: OtherDefaults,\n\n\ttooltip: string,\n\ticonUrl: string,\n}\n\nexport const playerPresets: Array<PresetSpecSettings<any>> = [\n\t{\n\t\tspec: Spec.SpecTankDeathknight,\n\t\trotation: TankDeathknightPresets.DefaultRotation,\n\t\ttalents: TankDeathknightPresets.BloodTalents.data,\n\t\tspecOptions: TankDeathknightPresets.DefaultOptions,\n\t\tconsumes: TankDeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Blood Tank',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: TankDeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: TankDeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Blood Tank Death Knight',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultBloodRotation,\n\t\ttalents: DeathknightPresets.BloodTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultBloodOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Blood DPS',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Blood DPS Death Knight',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 3),\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultFrostRotation,\n\t\ttalents: DeathknightPresets.FrostTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultFrostOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Frost',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_FROST_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_FROST_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Frost Death Knight',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultUnholyRotation,\n\t\ttalents: DeathknightPresets.UnholyDualWieldTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultUnholyOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Unholy',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Dual-Wield Unholy DK',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecBalanceDruid,\n\t\trotation: BalanceDruidPresets.DefaultRotation,\n\t\ttalents: BalanceDruidPresets.StandardTalents.data,\n\t\tspecOptions: BalanceDruidPresets.DefaultOptions,\n\t\tconsumes: BalanceDruidPresets.DefaultConsumes,\n\t\totherDefaults: BalanceDruidPresets.OtherDefaults,\n\t\tdefaultName: 'Balance',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: BalanceDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: BalanceDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecFeralDruid,\n\t\trotation: FeralDruidPresets.DefaultRotation,\n\t\ttalents: FeralDruidPresets.StandardTalents.data,\n\t\tspecOptions: FeralDruidPresets.DefaultOptions,\n\t\tconsumes: FeralDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Cat',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: FeralDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: FeralDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecFeralDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 3),\n\t},\n\t{\n\t\tspec: Spec.SpecFeralTankDruid,\n\t\trotation: FeralTankDruidPresets.DefaultRotation,\n\t\ttalents: FeralTankDruidPresets.StandardTalents.data,\n\t\tspecOptions: FeralTankDruidPresets.DefaultOptions,\n\t\tconsumes: FeralTankDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Bear',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: FeralTankDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: FeralTankDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecFeralTankDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecRestorationDruid,\n\t\trotation: RestorationDruidPresets.DefaultRotation,\n\t\ttalents: RestorationDruidPresets.CelestialFocusTalents.data,\n\t\tspecOptions: RestorationDruidPresets.DefaultOptions,\n\t\tconsumes: RestorationDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Restoration',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RestorationDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RestorationDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecRestorationDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.BeastMasteryTalents.data,\n\t\tspecOptions: HunterPresets.BMDefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'Beast Mastery',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Beast Mastery Hunter',\n\t\ticonUrl: getSpecIcon(Class.ClassHunter, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.MarksmanTalents.data,\n\t\tspecOptions: HunterPresets.DefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'Marksmanship',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Marksmanship Hunter',\n\t\ticonUrl: getSpecIcon(Class.ClassHunter, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.SurvivalTalents.data,\n\t\tspecOptions: HunterPresets.DefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'Survival',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.SV_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.SV_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.SV_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.SV_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Survival Hunter',\n\t\ticonUrl: getSpecIcon(Class.ClassHunter, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultArcaneRotation,\n\t\ttalents: MagePresets.ArcaneTalents.data,\n\t\tspecOptions: MagePresets.DefaultArcaneOptions,\n\t\tconsumes: MagePresets.DefaultArcaneConsumes,\n\t\totherDefaults: MagePresets.OtherDefaults,\n\t\tdefaultName: 'Arcane',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.ARCANE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.ARCANE_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.ARCANE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.ARCANE_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Arcane Mage',\n\t\ticonUrl: getSpecIcon(Class.ClassMage, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultFireRotation,\n\t\ttalents: MagePresets.FireTalents.data,\n\t\tspecOptions: MagePresets.DefaultFireOptions,\n\t\tconsumes: MagePresets.DefaultFireConsumes,\n\t\totherDefaults: MagePresets.OtherDefaults,\t\t\n\t\tdefaultName: 'Fire',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.FIRE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FIRE_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.FIRE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FIRE_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Fire Mage',\n\t\ticonUrl: getSpecIcon(Class.ClassMage, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultFrostRotation,\n\t\ttalents: MagePresets.FrostTalents.data,\n\t\tspecOptions: MagePresets.DefaultFrostOptions,\n\t\tconsumes: MagePresets.DefaultFrostConsumes,\n\t\totherDefaults: MagePresets.OtherDefaults,\t\t\n\t\tdefaultName: 'Frost',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.FROST_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FROST_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.FROST_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FROST_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Frost Mage',\n\t\ticonUrl: getSpecIcon(Class.ClassMage, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecRogue,\n\t\trotation: RoguePresets.DefaultRotation,\n\t\ttalents: RoguePresets.AssassinationTalents.data,\n\t\tspecOptions: RoguePresets.DefaultOptions,\n\t\tconsumes: RoguePresets.DefaultConsumes,\n\t\tdefaultName: 'Assassination',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Assassination Rogue',\n\t\ticonUrl: getSpecIcon(Class.ClassRogue, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecRogue,\n\t\trotation: RoguePresets.DefaultRotation,\n\t\ttalents: RoguePresets.CombatTalents.data,\n\t\tspecOptions: RoguePresets.DefaultOptions,\n\t\tconsumes: RoguePresets.DefaultConsumes,\n\t\tdefaultName: 'Combat',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_COMBAT.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_COMBAT.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Combat Rogue',\n\t\ticonUrl: getSpecIcon(Class.ClassRogue, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecElementalShaman,\n\t\trotation: ElementalShamanPresets.DefaultRotation,\n\t\ttalents: ElementalShamanPresets.StandardTalents.data,\n\t\tspecOptions: ElementalShamanPresets.DefaultOptions,\n\t\tconsumes: ElementalShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Elemental',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ElementalShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ElementalShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecElementalShaman],\n\t\ticonUrl: getSpecIcon(Class.ClassShaman, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecEnhancementShaman,\n\t\trotation: EnhancementShamanPresets.DefaultRotation,\n\t\ttalents: EnhancementShamanPresets.StandardTalents.data,\n\t\tspecOptions: EnhancementShamanPresets.DefaultOptions,\n\t\tconsumes: EnhancementShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Enhancement',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: EnhancementShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: EnhancementShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecEnhancementShaman],\n\t\ticonUrl: getSpecIcon(Class.ClassShaman, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecRestorationShaman,\n\t\trotation: RestorationShamanPresets.DefaultRotation,\n\t\ttalents: RestorationShamanPresets.RaidHealingTalents.data,\n\t\tspecOptions: RestorationShamanPresets.DefaultOptions,\n\t\tconsumes: RestorationShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Restoration',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RestorationShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RestorationShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecRestorationShaman],\n\t\ticonUrl: getSpecIcon(Class.ClassShaman, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecHealingPriest,\n\t\trotation: HealingPriestPresets.DiscDefaultRotation,\n\t\ttalents: HealingPriestPresets.DiscTalents.data,\n\t\tspecOptions: HealingPriestPresets.DefaultOptions,\n\t\tconsumes: HealingPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Discipline',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HealingPriestPresets.DISC_P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HealingPriestPresets.DISC_P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Discipline Priest',\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecHealingPriest,\n\t\trotation: HealingPriestPresets.HolyDefaultRotation,\n\t\ttalents: HealingPriestPresets.HolyTalents.data,\n\t\tspecOptions: HealingPriestPresets.DefaultOptions,\n\t\tconsumes: HealingPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Holy',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HealingPriestPresets.HOLY_P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HealingPriestPresets.HOLY_P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Holy Priest',\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecShadowPriest,\n\t\trotation: ShadowPriestPresets.DefaultRotation,\n\t\ttalents: ShadowPriestPresets.StandardTalents.data,\n\t\tspecOptions: ShadowPriestPresets.DefaultOptions,\n\t\tconsumes: ShadowPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Shadow',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ShadowPriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ShadowPriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecShadowPriest],\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecSmitePriest,\n\t\trotation: SmitePriestPresets.DefaultRotation,\n\t\ttalents: SmitePriestPresets.StandardTalents.data,\n\t\tspecOptions: SmitePriestPresets.DefaultOptions,\n\t\tconsumes: SmitePriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Smite',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: SmitePriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: SmitePriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecSmitePriest],\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 3),\n\t},\n\t{\n\t\tspec: Spec.SpecWarrior,\n\t\trotation: WarriorPresets.ArmsRotation,\n\t\ttalents: WarriorPresets.ArmsTalents.data,\n\t\tspecOptions: WarriorPresets.DefaultOptions,\n\t\tconsumes: WarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Arms',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarriorPresets.P1_ARMS_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_ARMS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarriorPresets.P1_ARMS_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_ARMS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Arms Warrior',\n\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecWarrior,\n\t\trotation: WarriorPresets.DefaultRotation,\n\t\ttalents: WarriorPresets.FuryTalents.data,\n\t\tspecOptions: WarriorPresets.DefaultOptions,\n\t\tconsumes: WarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Fury',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarriorPresets.P1_FURY_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_FURY_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarriorPresets.P1_FURY_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_FURY_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Fury Warrior',\n\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecProtectionWarrior,\n\t\trotation: ProtectionWarriorPresets.DefaultRotation,\n\t\ttalents: ProtectionWarriorPresets.StandardTalents.data,\n\t\tspecOptions: ProtectionWarriorPresets.DefaultOptions,\n\t\tconsumes: ProtectionWarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Protection',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ProtectionWarriorPresets.P1_BALANCED_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ProtectionWarriorPresets.P1_BALANCED_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Protection Warrior',\n\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecHolyPaladin,\n\t\trotation: HolyPaladinPresets.DefaultRotation,\n\t\ttalents: HolyPaladinPresets.StandardTalents.data,\n\t\tspecOptions: HolyPaladinPresets.DefaultOptions,\n\t\tconsumes: HolyPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Holy',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HolyPaladinPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HolyPaladinPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Holy Paladin',\n\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecProtectionPaladin,\n\t\trotation: ProtectionPaladinPresets.DefaultRotation,\n\t\ttalents: ProtectionPaladinPresets.GenericAoeTalents.data,\n\t\tspecOptions: ProtectionPaladinPresets.DefaultOptions,\n\t\tconsumes: ProtectionPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Protection',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ProtectionPaladinPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ProtectionPaladinPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Protection Paladin',\n\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecRetributionPaladin,\n\t\trotation: RetributionPaladinPresets.DefaultRotation,\n\t\ttalents: RetributionPaladinPresets.AuraMasteryTalents.data,\n\t\tspecOptions: RetributionPaladinPresets.DefaultOptions,\n\t\tconsumes: RetributionPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Retribution',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RetributionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: RetributionPaladinPresets.P2_PRESET.gear,\n\t\t\t\t3: RetributionPaladinPresets.P3_PRESET.gear,\n\t\t\t\t4: RetributionPaladinPresets.P4_PRESET.gear,\n\t\t\t\t5: RetributionPaladinPresets.P5_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RetributionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: RetributionPaladinPresets.P2_PRESET.gear,\n\t\t\t\t3: RetributionPaladinPresets.P3_PRESET.gear,\n\t\t\t\t4: RetributionPaladinPresets.P4_PRESET.gear,\n\t\t\t\t5: RetributionPaladinPresets.P5_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Retribution Paladin',\n\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.AfflictionRotation,\n\t\ttalents: WarlockPresets.AfflictionTalents.data,\n\t\tspecOptions: WarlockPresets.AfflictionOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Affliction',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_11.gear,\n\t\t\t},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_11.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_11.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Affliction Warlock',\n\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.DemonologyRotation,\n\t\ttalents: WarlockPresets.DemonologyTalents.data,\n\t\tspecOptions: WarlockPresets.DemonologyOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Demonology',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Demonology Warlock',\n\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.DestructionRotation,\n\t\ttalents: WarlockPresets.DestructionTalents.data,\n\t\tspecOptions: WarlockPresets.DestructionOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Destruction',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Destruction Warlock',\n\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 2),\n\t},\n];\n\nexport const implementedSpecs: Array<Spec> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { Raid } from '../core/raid.js';\nimport { MAX_PARTY_SIZE } from '../core/party.js';\nimport { Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { cssClassForClass, playerToSpec } from '../core/proto_utils/utils.js';\nimport { isTankSpec } from '../core/proto_utils/utils.js';\nimport { specToClass } from '../core/proto_utils/utils.js';\nimport { newRaidTarget } from '../core/proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem } from '../core/utils.js';\nimport { getEnumValues } from '../core/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { playerPresets, specSimFactories } from './presets.js';\n\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { Mage_Options as MageOptions } from '../core/proto/mage.js';\nimport { SmitePriest_Options as SmitePriestOptions } from '../core/proto/priest.js';\nimport { BaseModal } from '../core/components/base_modal.js';\nimport { Tooltip } from 'bootstrap';\n\nconst NEW_PLAYER: number = -1;\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\n\t\tconst activePartiesSelector = new EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t\t{ name: '40', value: 8 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst factionSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (picker: NewPlayerPicker) => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (picker: NewPlayerPicker) => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst phaseSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Gear',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Phase 1', value: 1 },\n\t\t\t\t// Presets aren't filled for most roles so disable these options for now.\n\t\t\t\t//{ name: 'Phase 2', value: 2 },\n\t\t\t\t//{ name: 'Phase 3', value: 3 },\n\t\t\t\t//{ name: 'Phase 4', value: 4 },\n\t\t\t\t//{ name: 'Phase 5', value: 5 },\n\t\t\t],\n\t\t\tchangedEvent: (picker: NewPlayerPicker) => this.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: (picker: NewPlayerPicker) => this.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = partyDps.toFixed(1);\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player)\n\t\t\t\tthis.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = playerDps.toFixed(1);\n\n\t\t\t\tif (referenceData)\n\t\t\t\t\tformatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar dropData = event.dataTransfer!.getData(\"text/plain\");\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tvar localPlayer = new Player(playerToSpec(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = cssClassForClass(this.player.getClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"false\"/>\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"false\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"false\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tthis.nameElem?.addEventListener('input', event => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mousedown', event => {\n\t\t\tthis.rootElem.setAttribute('draggable', 'false')\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false')\n\t\t})\n\n\t\tthis.nameElem?.addEventListener('mouseup', event => {\n\t\t\tthis.rootElem.setAttribute('draggable', 'true')\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true')\n\t\t})\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem?.addEventListener('focusout', event => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = emptyName;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tvar playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector('.player-edit') as HTMLElement;\n\t\tconst copyElem = this.rootElem.querySelector('.player-copy') as HTMLElement;\n\t\tconst deleteElem = this.rootElem.querySelector('.player-delete') as HTMLElement;\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target != copyElem) {\n\t\t\t\tdragStart(event, DragType.Swap)\n\t\t\t}\n\t\t}\n\n\t\tconst editTooltip = Tooltip.getOrCreateInstance(editElem);\n\t\tconst copyTooltip = Tooltip.getOrCreateInstance(copyElem);\n\t\tconst deleteTooltip = Tooltip.getOrCreateInstance(deleteElem);\n\n\t\teditElem.onclick = event => {\n\t\t\tnew PlayerEditorModal(this.player as Player<any>);\n\t\t};\n\t\tcopyElem.ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t}\n\t\tdeleteElem.onclick = event => {\n\t\t\tdeleteTooltip.hide();\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t}\n\t}\n}\n\nclass PlayerEditorModal extends BaseModal {\n\tconstructor(player: Player<any>) {\n\t\tsuper('player-editor-modal', {\n\t\t\tcloseButton: {fixed: true, text: false},\n\t\t\theader: false\n\t\t});\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.insertAdjacentHTML('beforeend', `\n\t\t\t<div class=\"player-editor within-raid-sim\"></div>\n\t\t`);\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tconst individualSim = specSimFactories[player.spec]!(editorRoot, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => specToClass[preset.spec] == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container', `bg-${cssClassForClass(wowClass as Class)}-dampened`);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"${matchingPreset.tooltip}\"\n\t\t\t\t\t\tdata-bs-html=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${matchingPreset.iconUrl}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tTooltip.getOrCreateInstance(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl;\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(matchingPreset.spec, this.raidPicker.raid.sim);\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setRotation(eventID, matchingPreset.rotation);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tnewPlayer.setGear(\n\t\t\t\t\t\t\t\teventID,\n\t\t\t\t\t\t\t\tthis.raidPicker.raid.sim.db.lookupEquipmentSpec(\n\t\t\t\t\t\t\t\t\tmatchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (isTankSpec(newPlayer.spec)) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromRaidTarget(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeRaidTarget()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeRaidTarget();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.spec == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.innervateTarget = newRaidTarget(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecSmitePriest) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as SmitePriestOptions;\n\t\tnewOptions.powerInfusionTarget = newRaidTarget(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecMage) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as MageOptions;\n\t\tnewOptions.focusMagicTarget = newRaidTarget(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import {\n\tClass,\n\tRaidBuffs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { Component } from '../core/components/component.js';\nimport { Player } from \"../core/player.js\";\nimport { Raid } from \"../core/raid.js\";\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport {\n\tClassSpecs,\n\tSpecTalents,\n  specToClass,\n\tisTankSpec,\n\tisHealingSpec,\n\tisMeleeDpsSpec,\n\tisRangedDpsSpec,\n\ttextCssClassForClass,\n} from '../core/proto_utils/utils.js';\nimport { sum } from '../core/utils.js';\n\nimport { Mage_Rotation_Type as MageRotationType } from '../core/proto/mage.js';\nimport { Hunter_Rotation_StingType as HunterStingType, Hunter_Options_PetType as HunterPetType } from '../core/proto/hunter.js';\nimport { PaladinAura } from '../core/proto/paladin.js';\nimport { Rogue_Rotation_Frequency as ExposeFrequency } from '../core/proto/rogue.js';\nimport { AirTotem, EarthTotem, FireTotem, WaterTotem } from '../core/proto/shaman.js';\nimport { Warlock_Rotation_Curse as WarlockCurse, Warlock_Options_Summon as WarlockSummon } from '../core/proto/warlock.js';\nimport { WarriorShout, Warrior_Rotation_SunderArmor as SunderArmor } from '../core/proto/warrior.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { Tooltip } from 'bootstrap';\n\ninterface RaidStatsOptions {\n\tsections: Array<RaidStatsSectionOptions>,\n}\n\ninterface RaidStatsSectionOptions {\n\tlabel: string,\n\tcategories: Array<RaidStatsCategoryOptions>,\n}\n\ninterface RaidStatsCategoryOptions {\n\tlabel: string,\n\teffects: Array<RaidStatsEffectOptions>,\n}\n\ntype PlayerProvider = { class?: Class, condition: (player: Player<any>) => boolean };\ntype RaidProvider = (raid: Raid) => boolean;\n\ninterface RaidStatsEffectOptions {\n\tlabel: string,\n\tactionId?: ActionId,\n\tplayerData?: PlayerProvider,\n\traidData?: RaidProvider,\n}\n\nexport class RaidStats extends Component {\n\tprivate readonly categories: Array<RaidStatsCategory>;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-stats');\n\n\t\tlet categories: Array<RaidStatsCategory> = [];\n\t\tRAID_STATS_OPTIONS.sections.forEach(section => {\n\t\t\tconst sectionElem = document.createElement('div');\n\t\t\tsectionElem.classList.add('raid-stats-section');\n\t\t\tthis.rootElem.appendChild(sectionElem);\n\t\t\tsectionElem.innerHTML = `\n\t\t\t\t<div class=\"raid-stats-section-header\">\n\t\t\t\t\t<label class=\"raid-stats-section-label form-label\">${section.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"raid-stats-section-content\"></div>\n\t\t\t`;\n\t\t\tconst contentElem = sectionElem.getElementsByClassName('raid-stats-section-content')[0] as HTMLDivElement;\n\n\t\t\tsection.categories.forEach(categoryOptions => {\n\t\t\t\tcategories.push(new RaidStatsCategory(contentElem, raidSimUI, categoryOptions));\n\t\t\t});\n\t\t});\n\t\tthis.categories = categories;\n\n\t\traidSimUI.changeEmitter.on(eventID => this.categories.forEach(c => c.update()));\n\t}\n}\n\nclass RaidStatsCategory extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsCategoryOptions;\n\tprivate readonly effects: Array<RaidStatsEffect>;\n\tprivate readonly counterElem: HTMLElement;\n\tprivate readonly tooltipElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsCategoryOptions) {\n\t\tsuper(parent, 'raid-stats-category-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a href=\"javascript:void(0)\" role=\"button\" class=\"raid-stats-category\">\n\t\t\t\t<span class=\"raid-stats-category-counter\"></span>\n\t\t\t\t<span class=\"raid-stats-category-label\">${options.label}</span>\n\t\t\t</a>\n\t\t`;\n\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-category-counter') as HTMLElement;\n\t\tthis.tooltipElem = document.createElement('div');\n\t\tthis.tooltipElem.innerHTML = `\n\t\t\t<label class=\"raid-stats-category-label\">${options.label}</label>\n\t\t`\n\n\t\tthis.effects = options.effects.map(opt => new RaidStatsEffect(this.tooltipElem, raidSimUI, opt));\n\n\t\tif (options.effects.length != 1 || options.effects[0].playerData?.class) {\n\t\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\t\tstatsLink.setAttribute('data-bs-toggle', 'tooltip');\n\t\t\tstatsLink.setAttribute('data-bs-placement', 'right');\n\t\t\tstatsLink.setAttribute('data-bs-html', 'true');\n\n\t\t\t// Using the title option here because outerHTML sanitizes and filters out the img src options\n\t\t\tTooltip.getOrCreateInstance(statsLink, {\n\t\t\t\tcustomClass: 'raid-stats-category-tooltip',\n\t\t\t\ttitle: this.tooltipElem,\n\t\t\t})\n\t\t}\n\t}\n\n\tupdate() {\n\t\tthis.effects.forEach(effect => effect.update());\n\n\t\tconst total = sum(this.effects.map(effect => effect.count));\n\t\tthis.counterElem.textContent = String(total);\n\n\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\tif (total == 0) {\n\t\t\tstatsLink?.classList.remove('active');\n\t\t} else {\n\t\t\tstatsLink?.classList.add('active');\n\t\t}\n\t}\n}\n\nclass RaidStatsEffect extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsEffectOptions;\n\tprivate readonly counterElem: HTMLElement;\n\n\tcurPlayers: Array<Player<any>>;\n\tcount: number;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsEffectOptions) {\n\t\tsuper(parent, 'raid-stats-effect');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.curPlayers = [];\n\t\tthis.count = 0;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<span class=\"raid-stats-effect-counter\"></span>\n\t\t\t<img class=\"raid-stats-effect-icon\"></img>\n\t\t\t<span class=\"raid-stats-effect-label\">${options.label}</span>\n\t\t`;\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-effect-counter') as HTMLElement;\n\n\t\tif (this.options.playerData?.class) {\n\t\t\tconst labelElem = this.rootElem.querySelector('.raid-stats-effect-label') as HTMLElement;\n\t\t\tconst playerCssClass = textCssClassForClass(this.options.playerData.class);\n\t\t\tlabelElem.classList.add(playerCssClass);\n\t\t}\n\n\t\tconst iconElem = this.rootElem.querySelector('.raid-stats-effect-icon') as HTMLImageElement;\n\t\tif (options.actionId) {\n\t\t\toptions.actionId.fill().then(actionId => iconElem.src = actionId.iconUrl);\n\t\t} else {\n\t\t\ticonElem.remove();\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.options.playerData) {\n\t\t\tthis.curPlayers = this.raidSimUI.getActivePlayers().filter(p => this.options.playerData!.condition(p));\n\t\t}\n\n\t\tconst raidData = this.options.raidData && this.options.raidData(this.raidSimUI.sim.raid);\n\n\t\tthis.count = this.curPlayers.length + (raidData ? 1 : 0);\n\t\tthis.counterElem.textContent = String(this.count);\n\t\tif (this.count == 0) {\n\t\t\tthis.rootElem.classList.remove('active');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('active');\n\t\t}\n\t}\n}\n\nfunction negateIf(val: boolean, cond: boolean): boolean {\n\treturn cond ? !val : val;\n}\n\nfunction playerClass<T extends Class>(clazz: T, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalentInternal<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, negateTalent: boolean, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& negateIf(Boolean(player.getTalents()[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, false, extraCondition);\n}\nfunction playerClassAndMissingTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, true, extraCondition);\n}\nfunction playerSpecAndTalentInternal<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, negateTalent: boolean, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: specToClass[spec],\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isSpec(spec)\n\t\t\t\t&& negateIf(Boolean(player.getTalents()[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerSpecAndTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, false, extraCondition);\n}\nfunction playerSpecAndMissingTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, true, extraCondition);\n}\n\nfunction raidBuff(buffName: keyof RaidBuffs): RaidProvider {\n\treturn (raid: Raid): boolean => {\n\t\treturn Boolean(raid.getBuffs()[buffName]);\n\t};\n}\n\nconst RAID_STATS_OPTIONS: RaidStatsOptions = {sections: [\n\t{\n\t\tlabel: 'Roles',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Tanks',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\t\tplayerData: { condition: player => isTankSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Healers',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\t\tplayerData: { condition: player => isHealingSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Melee',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\t\tplayerData: { condition: player => isMeleeDpsSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ranged',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\t\tplayerData: { condition: player => isRangedDpsSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'Buffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(2825),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().bloodlust),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stats',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Gift of the Wild',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(17051),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Gift of the Wild',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48470),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Drums of the Wild',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(49634),\n\t\t\t\t\t\traidData: raidBuff('drumsOfTheWild'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stats %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(25898),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Drums of Forgotten Kings',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(49633),\n\t\t\t\t\t\traidData: raidBuff('drumsOfForgottenKings'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Sanctuary',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Armor',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Devotion Aura',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20140),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Devotion Aura',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48942),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Stoneskin Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16293),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'guardianTotems', player => player.getRotation().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Stoneskin Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58753),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'guardianTotems', player => player.getRotation().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Protection',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(43468),\n\t\t\t\t\t\traidData: raidBuff('scrollOfProtection'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stamina',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Power Word Fortitude',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(14767),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Power Word Fortitude',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48161),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Stamina',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(37094),\n\t\t\t\t\t\traidData: raidBuff('scrollOfStamina'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Str + Agi',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Strength of Earth Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(52456),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'enhancingTotems', player => player.getRotation().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Strength of Earth Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58643),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'enhancingTotems', player => player.getRotation().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Horn of Winter',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57623),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDeathknight),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Strength',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(43466),\n\t\t\t\t\t\traidData: raidBuff('scrollOfStrength'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Agility',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(43464),\n\t\t\t\t\t\traidData: raidBuff('scrollOfAgility'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Intellect',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(43002),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Intellect',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(37092),\n\t\t\t\t\t\traidData: raidBuff('scrollOfIntellect'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spirit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Divine Spirit',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48073),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Spirit',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(37098),\n\t\t\t\t\t\traidData: raidBuff('scrollOfSpirit'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Blessing of Might',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20045),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48934),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Battle Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Battle Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47436),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Atk Pwr %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Abomination\\'s Might',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53138),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'abominationsMight'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Unleashed Rage',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(30809),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'unleashedRage'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Trueshot Aura',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(19506),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'trueshotAura'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Damage %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sanctified Retribution',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(31869),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'sanctifiedRetribution'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Arcane Empowerment',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(31583),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'arcaneEmpowerment'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Ferocious Inspiration',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(34460),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'ferociousInspiration'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Mit %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Renewed Hope',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57472),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'renewedHope'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing Of Sanctuary',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Vigilance',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(50720),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'vigilance'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Haste %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Swift Retribution',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53648),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'swiftRetribution'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Moonkin Form',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48396),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMoonkinForm'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'MP5',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Blessing of Wisdom',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20245),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Wisdom',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48938),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Mana Spring Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16206),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'restorativeTotems', player => player.getRotation().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Mana Spring Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58774),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'restorativeTotems', player => player.getRotation().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Melee Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Leader of the Pack',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(17007),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'leaderOfThePack'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Rampage',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29801),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'rampage'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Melee Haste',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Icy Talons',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(55610),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTalons'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Windfury Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29193),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getRotation().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Windfury Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(65990),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getRotation().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Power',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demonic Pact',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47240),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'demonicPact'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57722),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getRotation().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Flametongue Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58656),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getRotation().totems?.fire == FireTotem.FlametongueTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Moonkin Form',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(24907),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'moonkinForm'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Elemental Oath',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51470),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'elementalOath'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Haste',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Wrath of Air Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(3738),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getRotation().totems?.air == AirTotem.WrathOfAirTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Health',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Commanding Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Commanding Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47440),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Imp',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(18696),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blood Pact',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47982),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Replenishment',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Vampiric Touch',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48160),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'vampiricTouch'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Judgements of the Wise',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(31878),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecRetributionPaladin, 'judgementsOfTheWise'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Hunting Party',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53292),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecHunter, 'huntingParty'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Soul Leech',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54118),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecWarlock, 'improvedSoulLeech'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Enduring Winter',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(44561),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecMage, 'enduringWinter'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'External Buffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Innervate',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29166),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(10060),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'powerInfusion'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54648),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'focusMagic'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57933),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(49016),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'hysteria'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(33206),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'painSuppression'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53530),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'divineGuardian'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'DPS Debuffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Major ArP',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sunder Armor',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47467),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior, player => player.isSpec(Spec.SpecProtectionWarrior) || (player as Player<Spec.SpecWarrior>).getRotation().sunderArmor == SunderArmor.SunderArmorMaintain),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Expose Armor',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(8647),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue, player => player.getRotation().exposeArmorFrequency == ExposeFrequency.Maintain),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Acid Spit',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(55754),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Worm),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Minor ArP',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Faerie Fire',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(770),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.spec == Spec.SpecFeralTankDruid ||\n\t\t\t\t\t\t\t(player.spec != Spec.SpecRestorationDruid && (player as Player<Spec.SpecBalanceDruid | Spec.SpecFeralDruid>).getRotation().maintainFaerieFire)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock, player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sting',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(56631),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Wasp),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Spore Cloud',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53598),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Bat),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Phys Vuln',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blood Frenzy',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29859),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'bloodFrenzy'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Savage Combat',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58413),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'savageCombat'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Bleed',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Mangle',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Trauma',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(46855),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'trauma'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Stampede',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57393),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Rhino),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(30706),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getRotation().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Heart of the Crusader',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20337),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'heartOfTheCrusader', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Master Poisoner',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58410),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'masterPoisoner'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Shadow Bolt',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(17803),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedShadowBolt'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Scorch',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12873),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'improvedScorch', player => {\n\t\t\t\t\t\t\tconst rotation = player.getRotation();\n\t\t\t\t\t\t\treturn rotation.type == MageRotationType.Fire && rotation.maintainImprovedScorch;\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Winter\\'s Chill',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(28593),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'wintersChill', player => player.getRotation().type == MageRotationType.Frost),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Hit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Misery',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(33198),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'misery'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Faerie Fire',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(33602),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'improvedFaerieFire'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Dmg',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Ebon Plaguebringer',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51161),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'ebonPlaguebringer'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Earth and Moon',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48511),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'earthAndMoon'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Curse of Elements',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47865),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock, player => player.getRotation().curse == WarlockCurse.Elements),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'Mitigation Debuffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Vindication',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(26016),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'vindication', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Demoralizing Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12879),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedDemoralizingShout', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainDemoShout) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().demoShoutChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demoralizing Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47437),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedDemoralizingShout', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainDemoShout) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().demoShoutChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Demoralizing Roar',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getRotation().maintainDemoralizingRoar),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demoralizing Roar',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48560),\n\t\t\t\t\t\tplayerData: playerSpecAndMissingTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getRotation().maintainDemoralizingRoar),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Curse of Weakness',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(18180),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demoralizing Screech',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(55487),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.CarrionBird),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Atk Speed',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Thunder Clap',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12666),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedThunderClap', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainThunderClap) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().thunderClapChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Thunder Clap',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47502),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedThunderClap', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainThunderClap) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().thunderClapChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Frost Fever',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Frost Fever',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Judgements of the Just',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53696),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'judgementsOfTheJust'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Infected Wounds',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48485),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'infectedWounds', player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Miss',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Insect Swarm',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(65855),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'insectSwarm'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scorpid Sting',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(3043),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getRotation().sting == HunterStingType.ScorpidSting),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n]};\n","import { RaidPicker } from \"./raid_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { RaidStats } from \"./raid_stats\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport { BlessingsAssignments, SavedRaid } from \"../core/proto/ui\";\nimport { EventID, TypedEvent } from \"../core/typed_event\";\nimport { Raid as RaidProto } from \"../core/proto/api\";\n\nexport class RaidTab extends SimTab {\n  protected simUI: RaidSimUI;\n\n  readonly leftPanel: HTMLElement;\n  readonly rightPanel: HTMLElement;\n\n  constructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n    super(parentElem, simUI, {identifier: 'raid-tab', title: 'Raid'});\n    this.simUI = simUI;\n\n    this.rootElem.classList.add('active', 'show')\n\n    this.leftPanel = document.createElement('div');\n    this.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n    this.rightPanel = document.createElement('div');\n    this.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n    this.contentContainer.appendChild(this.leftPanel);\n    this.contentContainer.appendChild(this.rightPanel);\n\n    this.buildTabContent();\n  }\n\n  protected buildTabContent() {\n    this.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n    new RaidStats(this.leftPanel, this.simUI);\n\n    const savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(\n\t\t\tthis.rightPanel, this.simUI, this.simUI, {\n\t\t\t\tlabel: 'Raid',\n        header: {title: 'Saved Raid Groups'},\n\t\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\t\tblessings: this.simUI.blessingsPicker!.getAssignments(),\n\t\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t\t\tphase: this.simUI.sim.getPhase(),\n\t\t\t\t}),\n\t\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\t\tthis.simUI.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\t\tif (newRaid.phase) this.simUI.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t\t},\n\t\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t\t}\n\t\t);\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n  }\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { emptyRaidTarget, cssClassForClass } from '../proto_utils/utils.js';\n\nexport interface RaidTargetPickerConfig<ModObject> extends InputConfig<ModObject, RaidTarget> {\n\tnoTargetLabel: string,\n\tcompChangeEmitter: TypedEvent<void>,\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean,\n\tplayer: Player<any>|null,\n}\n\n// Dropdown menu for selecting a player.\nexport class RaidTargetPicker<ModObject> extends Input<ModObject, RaidTarget> {\n\tprivate readonly config: RaidTargetPickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curRaidTarget: RaidTarget;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: RaidTargetPickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromRaidTarget(config.getValue(modObj));\n\t\tthis.curRaidTarget = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = {player: null, isDropdown: true}\n\t\tconst playerOptions = this.raid.getPlayers().filter(player => player != null).map(player => {\n\t\t\treturn { player: player, isDropdown: true }\n\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions]\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevRaidTarget = this.curRaidTarget;\n\t\tthis.curRaidTarget = this.getInputValue();\n\t\tif (!RaidTarget.equals(prevRaidTarget, this.curRaidTarget)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curRaidTarget);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = RaidTargetPicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curRaidTarget = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): RaidTarget {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeRaidTarget();\n\t\t} else {\n\t\t\treturn emptyRaidTarget();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: RaidTarget) {\n\t\tthis.curRaidTarget = RaidTarget.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromRaidTarget(this.curRaidTarget);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData)\n\t\t\tthis.buttonElem.innerHTML = RaidTargetPicker.makeOptionElem({player: optionData.player}).outerHTML;\n\t}\n\n\t// static makeOptionElem(data: RaidTargetElemOption): HTMLElement {\n\t// \tconst optionContainer = document.createElement('div');\n\t// \toptionContainer.classList.add('dropdown-option-container');\n\n\t// \tconst option = document.createElement('div');\n\t// \toption.classList.add('raid-target-picker-option');\n\t// \toptionContainer.appendChild(option);\n\t// \tif (data.isDropdown) {\n\t// \t\toption.classList.add('dropdown-option');\n\t// \t}\n\n\t// \tif (data.iconUrl) {\n\t// \t\tconst icon = document.createElement('img');\n\t// \t\ticon.src = data.iconUrl;\n\t// \t\ticon.classList.add('raid-target-picker-icon');\n\t// \t\toption.appendChild(icon);\n\t// \t}\n\n\t// \tif (data.text) {\n\t// \t\tconst label = document.createElement('span');\n\t// \t\tlabel.textContent = data.text;\n\t// \t\tlabel.classList.add('raid-target-picker-label');\n\t// \t\toption.appendChild(label);\n\t// \t}\n\n\t// \treturn optionContainer;\n\t// }\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? cssClassForClass(data.player.getClass()) : '';\n\t\tlet playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { RaidTargetPicker } from '../core/components/raid_target_picker.js';\n\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport { Class, RaidTarget, Spec } from '../core/proto/common.js';\nimport { emptyRaidTarget } from '../core/proto_utils/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\tprivate readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\tprivate readonly focusMagicsPicker: FocusMagicsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\tthis.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t\tthis.focusMagicsPicker = new FocusMagicsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>,\n\ttargetPicker: RaidTargetPicker<Player<any>>,\n\ttargetPlayer: Player<any> | null;\n};\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(eventID => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0)\n\t\t\tthis.rootElem.classList.add('hide');\n\t\telse\n\t\tthis.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tlet sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(\n\t\t\t\tRaidTargetPicker.makeOptionElem({player: sourcePlayer, isDropdown: false})\n\t\t\t);\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: RaidTargetPicker<Player<any>> | null = new RaidTargetPicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: RaidTarget) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromRaidTarget(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromRaidTarget(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): RaidTarget;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().innervateTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassPriest) && player.getTalents().powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecSmitePriest>).getSpecOptions().powerInfusionTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecSmitePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trade';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassRogue));\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecRogue>).getSpecOptions().tricksOfTheTradeTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecRogue>).getSpecOptions();\n\t\tnewOptions.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass UnholyFrenzyPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Unholy Frenzy';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDeathknight) && player.getTalents().hysteria);\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecDeathknight>).getSpecOptions().unholyFrenzyTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecDeathknight>).getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass FocusMagicsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Focus Magic';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassMage));\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecMage>).getSpecOptions().focusMagicTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecMage>).getSpecOptions();\n\t\tnewOptions.focusMagicTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\n\nimport { memeSpecs } from '../core/launched_sims';\nimport { EventID, TypedEvent } from '../core/typed_event';\n\nimport { Class, Spec } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport {\n\tmakeDefaultBlessings,\n\tclassColors,\n\tnaturalSpecOrder,\n\tspecNames,\n\ttitleIcons,\n} from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\nimport { implementedSpecs } from './presets';\nimport { Tooltip } from 'bootstrap';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst specs = naturalSpecOrder\n\t\t\t.filter(spec => implementedSpecs.includes(spec))\n\t\t\t.filter(spec => !memeSpecs.includes(spec));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tspecs.map(spec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(spec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx])\n\t\t\t\t\tthis.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: classColors[Class.ClassPaladin], value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25898), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48934), value: Blessings.BlessingOfMight },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48938), value: Blessings.BlessingOfWisdom },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25899), value: Blessings.BlessingOfSanctuary },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(Class.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[spec] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[spec];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[spec] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers()\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: Spec): HTMLElement {\n\t\tlet fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${titleIcons[spec]}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\tdata-bs-title=\"${specNames[spec]}\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\tTooltip.getOrCreateInstance(icon);\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { RaidTargetPicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { RaidTarget } from '../core/proto/common';\nimport { emptyRaidTarget } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew RaidTargetPicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyRaidTarget(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: RaidTarget) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyRaidTarget());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from \"../core/components/content_block\";\nimport { EncounterPicker } from \"../core/components/encounter_picker\";\nimport { IconPicker } from \"../core/components/icon_picker\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\n\nimport { Encounter } from \"../core/encounter\";\nimport { Raid } from \"../core/raid\";\nimport { EventID } from \"../core/typed_event\";\n\nimport { RaidBuffs } from \"../core/proto/common\";\nimport { SavedEncounter } from \"../core/proto/ui\";\nimport { ActionId } from \"../core/proto_utils/action_id\";\n\nimport { AssignmentsPicker } from \"./assignments_picker\";\nimport { BlessingsPicker } from \"./blessings_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { TanksPicker } from \"./tanks_picker\";\n\nimport * as Tooltips from \"../core/constants/tooltips.js\";\n\nexport class SettingsTab extends SimTab {\n  protected simUI: RaidSimUI;\n\n  readonly leftPanel: HTMLElement;\n  readonly rightPanel: HTMLElement;\n\n  readonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n  constructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n    super(parentElem, simUI, {identifier: 'raid-settings-tab', title: 'Settings'});\n    this.simUI = simUI;\n\n    this.leftPanel = document.createElement('div');\n    this.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n    this.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n    this.contentContainer.appendChild(this.leftPanel);\n    this.contentContainer.appendChild(this.rightPanel);\n\n    this.buildTabContent();\n  }\n\n  protected buildTabContent() {\n    this.buildEncounterSettings();\n    this.buildConsumesSettings();\n    this.buildOtherSettings();\n\n    this.buildTankSettings();\n    this.buildAssignmentSettings();\n    \n    this.buildBlessingsPicker();\n    this.buildSavedDataPickers();\n  }\n\n  private buildEncounterSettings() {\n    const contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n      header: {title: 'Encounter'}\n    });\n\n    new EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, {showExecuteProportion: true}, this.simUI);\n  }\n\n  private buildConsumesSettings() {\n    const contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n      header: {title: 'Consumables'}\n    });\n\n    let container = document.createElement('div');\n    container.classList.add('consumes-container');\n\n    contentBlock.bodyElement.appendChild(container);\n\n    this.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49633), 'drumsOfForgottenKings'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49634), 'drumsOfTheWild');\n  }\n\n  private buildOtherSettings() {\n    // const raid = this.simUI.sim.raid;\n    // const contentBlock = new ContentBlock(this.column1, 'other-settings', {\n    //   header: {title: 'Other'}\n    // });\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n  }\n\n  private buildTankSettings() {\n    const contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: {title: 'Tanks'}\n\t\t});\n\n    new TanksPicker(contentBlock.bodyElement, this.simUI);\n  }\n\n  private buildAssignmentSettings() {\n    const contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: {title: 'External Buffs'}\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n  }\n\n  private buildBlessingsPicker() {\n    const contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n      header: {title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION}\n    });\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n  }\n\n  private buildSavedDataPickers() {\n    const savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI, this.simUI.sim.encounter, {\n      label: 'Encounter',\n      header: {title: 'Saved Encounters'},\n      storageKey: this.simUI.getSavedEncounterStorageKey(),\n      getData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n      setData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n      changeEmitters: [this.simUI.sim.encounter.changeEmitter],\n      equals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n      toJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n      fromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n  }\n\n  private makeBooleanRaidIconBuffInput(parent: HTMLElement, id: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n    const raid = this.simUI.sim.raid;\n\n    return new IconPicker<Raid, boolean>(parent, raid, {\n      id: id,\n      states: 2,\n      changedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n      getValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n      setValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n        const newBuffs = raid.getBuffs();\n        (newBuffs[field] as unknown as boolean) = newValue;\n        raid.setBuffs(eventID, newBuffs);\n      },\n    });\n  }\n}\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { MAX_PARTY_SIZE } from '../core/party';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tMobType,\n\tProfession,\n\tRace,\n\tRaidTarget,\n\tSpec,\n\tTarget as TargetProto,\n} from '../core/proto/common';\nimport { nameToClass, professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDruidSpecs,\n\tDeathknightSpecs,\n\tMageSpecs,\n\tPriestSpecs,\n\tRogueSpecs,\n\tSpecOptions,\n\tgetTalentTreePoints,\n\tmakeDefaultBlessings,\n\traceToFaction,\n\tspecTypeFunctions,\n\twithSpecProto,\n\tisTankSpec,\n\tplayerToSpec,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { Player } from '../core/player';\nimport { Target } from '../core/target';\nimport { bucket, distinct, sortByProperty } from '../core/utils';\n\nimport { playerPresets, PresetSpecSettings } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tonImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Export', true);\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\n\tprivate queryCounter: number = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token: string = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\t'method': 'POST',\n\t\t\t\t'headers': {\n\t\t\t\t\t'Authorization': 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\t'grant_type': 'client_credentials',\n\t\t\t\t}),\n\t\t\t})\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\t'method': 'GET',\n\t\t\t'headers': headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t}\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id)\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tconst rateLimit = await this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${\n\t\t\t\t\t\t[racialSpells, professionSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${\n\t\t\t\t\t\t[externalCDSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${\n\t\t\t\t\t\t[samePartyHealingSpells, otherPartyHealingSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && sourcePlayer.player.getRace() != Race.RaceDraenei) {\n\t\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames[Race.RaceDraenei]} from Heroic Presence aura event`);\n\t\t\t\t\t\tsourcePlayer.player.setRace(eventID, Race.RaceDraenei);\n\t\t\t\t\t\tfaction = Faction.Alliance;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames[spell.race]} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames[spell.profession]} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toRaidTarget());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number, endTime: number, id: number, name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tlet closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Target.defaultProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(p => PartyProto.create({\n\t\t\t\tplayers: [...new Array(5).keys()].map(p => PlayerProto.create()),\n\t\t\t})),\n\t\t});\n\n\t\twclPlayers\n\t\t\t.forEach(player => {\n\t\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\t\tconst playerProto = player.player.toProto();\n\t\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\t\tif (isTankSpec(playerToSpec(playerProto))) {\n\t\t\t\t\traid.tanks.push(player.toRaidTarget());\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex: number = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec|null;\n\n\treadonly player: Player<any>;\n\treadonly preset: PresetSpecSettings<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(this.spec, simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error('Could not find matching preset: ' + JSON.stringify({\n\t\t\t\t'name': this.name,\n\t\t\t\t'type': this.fullType,\n\t\t\t\t'talents': data.talents,\n\t\t\t}).toString());\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setGlyphs(eventID, this.preset.talents.glyphs!);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setRotation(eventID, this.preset.rotation);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(eventID, simUI.sim.db.lookupEquipmentSpec(EquipmentSpec.create({\n\t\t\titems: data.gear.map(gear => ItemSpec.create({\n\t\t\t\tid: gear.id,\n\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t\tgems: gear.gems ? gear.gems.map(gemInfo => gemInfo.id) : [],\n\t\t\t})),\n\t\t})));\n\t}\n\n\tprivate static getMatchingPreset(spec: Spec, talents: wclTalents[]): PresetSpecSettings<Spec> {\n\t\tconst matchingPresets = playerPresets.filter((preset) => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => acc += Math.abs(talents[i]?.guid - presetTalents[i]), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toRaidTarget(): RaidTarget {\n\t\treturn RaidTarget.create({\n\t\t\ttargetIndex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\t'DeathKnightBlood': Spec.SpecTankDeathknight,\n\t'DeathKnightLichborne': Spec.SpecTankDeathknight,\n\t'DeathKnightRuneblade': Spec.SpecDeathknight,\n\t'DeathKnightFrost': Spec.SpecDeathknight,\n\t'DeathKnightUnholy': Spec.SpecDeathknight,\n\t'DruidBalance': Spec.SpecBalanceDruid,\n\t'DruidFeral': Spec.SpecFeralDruid,\n\t'DruidWarden': Spec.SpecFeralTankDruid,\n\t'DruidGuardian': Spec.SpecFeralTankDruid,\n\t'DruidRestoration': Spec.SpecRestorationDruid,\n\t'HunterBeastMastery': Spec.SpecHunter,\n\t'HunterSurvival': Spec.SpecHunter,\n\t'HunterMarksmanship': Spec.SpecHunter,\n\t'MageArcane': Spec.SpecMage,\n\t'MageFire': Spec.SpecMage,\n\t'MageFrost': Spec.SpecMage,\n\t'PaladinHoly': Spec.SpecHolyPaladin,\n\t'PaladinJusticar': Spec.SpecProtectionPaladin,\n\t'PaladinProtection': Spec.SpecProtectionPaladin,\n\t'PaladinRetribution': Spec.SpecRetributionPaladin,\n\t'PriestHoly': Spec.SpecHealingPriest,\n\t'PriestDiscipline': Spec.SpecHealingPriest,\n\t'PriestShadow': Spec.SpecShadowPriest,\n\t'PriestSmite': Spec.SpecSmitePriest,\n\t'RogueAssassination': Spec.SpecRogue,\n\t'RogueCombat': Spec.SpecRogue,\n\t'RogueSubtlety': Spec.SpecRogue,\n\t'ShamanElemental': Spec.SpecElementalShaman,\n\t'ShamanEnhancement': Spec.SpecEnhancementShaman,\n\t'ShamanRestoration': Spec.SpecRestorationShaman,\n\t'WarlockDestruction': Spec.SpecWarlock,\n\t'WarlockAffliction': Spec.SpecWarlock,\n\t'WarlockDemonology': Spec.SpecWarlock,\n\t'WarriorArms': Spec.SpecWarrior,\n\t'WarriorFury': Spec.SpecWarrior,\n\t'WarriorChampion': Spec.SpecWarrior,\n\t'WarriorWarrior': Spec.SpecWarrior,\n\t'WarriorGladiator': Spec.SpecWarrior,\n\t'WarriorProtection': Spec.SpecProtectionWarrior,\n};\n\ninterface QuerySpell {\n\tid: number,\n\tname: string,\n}\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{id: number, name: string, race: Race}> = [\n\t{id: 25046, name: 'Arcane Torrent (Energy)', race: Race.RaceBloodElf},\n\t{id: 28730, name: 'Arcane Torrent (Mana)', race: Race.RaceBloodElf},\n\t{id: 50613, name: 'Arcane Torrent (Runic Power)', race: Race.RaceBloodElf},\n\t{id: 26297, name: 'Berserking', race: Race.RaceTroll},\n\t{id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc},\n\t{id: 33697, name: 'Blood Fury (AP+SP)', race: Race.RaceOrc},\n\t{id: 33702, name: 'Blood Fury (SP)', race: Race.RaceOrc},\n\t{id: 20589, name: 'Escape Artist', race: Race.RaceGnome},\n\t{id: 20594, name: 'Stoneform', race: Race.RaceDwarf},\n\t{id: 20549, name: 'War Stomp', race: Race.RaceTauren},\n\t{id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead},\n\t{id: 59752, name: 'Will to Survive', race: Race.RaceHuman},\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{id: number, name: string, profession: Profession}> = [\n\t{id: 55503, name: 'Lifeblood', profession: Profession.Herbalism},\n\t{id: 50305, name: 'Skinning', profession: Profession.Skinning},\n];\n\nconst externalCDSpells: Array<{id: number, name: string, class: Class, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => SpecOptions<any>}> = [\n\t{id: 29166, name: 'Innervate', class: Class.ClassDruid, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\toptions.innervateTarget = raidTarget;\n\t\treturn options;\n\t}},\n\t{id: 10060, name: 'Power Infusion', class: Class.ClassPriest, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<PriestSpecs>;\n\t\toptions.powerInfusionTarget = raidTarget;\n\t\treturn options;\n\t}},\n\t{id: 57933, name: 'Tricks of the Trade', class: Class.ClassRogue, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\toptions.tricksOfTheTradeTarget = raidTarget;\n\t\treturn options;\n\t}},\n\t{id: 49016, name: 'Unholy Frenzy', class: Class.ClassDeathknight, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<DeathknightSpecs>;\n\t\toptions.unholyFrenzyTarget = raidTarget;\n\t\treturn options;\n\t}},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{id: number, name: string}> = [\n\t{id: 54172, name: 'Divine Storm'},\n\t{id: 52042, name: 'Healing Stream Totem'},\n\t{id: 48076, name: 'Holy Nova'},\n\t{id: 48445, name: 'Tranquility'},\n\t{id: 15290, name: 'Vampiric Embrace'},\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{id: number, name: string}> = [\n\t{id: 48072, name: 'Prayer of Healing'},\n];\n\ninterface wclUrlData {\n\treportID: string,\n\tfightID: string,\n}\n\ninterface wclCastEvent {\n\ttype: 'cast',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number,\n\tpointsSpentThisHour: number,\n\tpointsResetIn: number\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\ninterface wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number,\n\t\tendTime: number,\n\t}[];\n}\n","import { EmbeddedDetailedResults } from \"../core/components/detailed_results.js\";\nimport { LogRunner } from \"../core/components/log_runner.js\";\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from \"../core/components/raid_sim_action.js\";\n\nimport { Player } from \"../core/player.js\";\nimport { Raid as RaidProto } from \"../core/proto/api.js\";\nimport { Class, Encounter as EncounterProto, RaidBuffs, TristateEffect } from \"../core/proto/common.js\";\nimport { Blessings } from \"../core/proto/paladin.js\";\nimport { BlessingsAssignments, RaidSimSettings, SavedEncounter } from \"../core/proto/ui.js\";\nimport { playerToSpec } from \"../core/proto_utils/utils.js\";\nimport { Sim } from \"../core/sim.js\";\nimport { SimUI } from \"../core/sim_ui.js\";\nimport { raidSimStatus } from '../core/launched_sims.js';\nimport { EventID, TypedEvent } from \"../core/typed_event.js\";\n\nimport { RaidTab } from \"./raid_tab.js\";\nimport { SettingsTab } from \"./settings_tab.js\";\n\nimport { BlessingsPicker } from \"./blessings_picker.js\";\nimport { implementedSpecs } from \"./presets.js\";\nimport { RaidPicker } from \"./raid_picker.js\";\n\nimport * as ImportExport from \"./import_export.js\";\n\ndeclare var pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>,\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/wotlk\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tprivate settingsMuuri: any;\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tlaunchStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\t\tthis.rootElem.classList.add('raid-sim-ui');\n\n\t\tthis.config = config;\n\t\tthis.settingsMuuri = null;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.sim.changeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t\tthis.addLogTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', parent => new ImportExport.RaidJsonImporter(parent, this));\n\t\tthis.simHeader.addImportLink('WCL', parent => new ImportExport.RaidWCLImporter(parent, this));\n\n\t\tthis.simHeader.addExportLink('JSON', parent => new ImportExport.RaidJsonExporter(parent, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab('Results', 'detailed-results-tab', `\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst detailedResults = new EmbeddedDetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate addLogTab() {\n\t\tthis.addTab('Log', 'log-tab', `\n\t\t\t<div class=\"log-runner\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst logRunner = new LogRunner(this.rootElem.getElementsByClassName('log-runner')[0] as HTMLElement, this);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\tif (this.settingsMuuri) {\n\t\t\t//this.settingsMuuri.refreshItems();\n\t\t}\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && playerToSpec(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfKings = true);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfMight = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfWisdom) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfWisdom = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfSanctuary) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfSanctuary = true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(eventID, RaidProto.create({\n\t\t\t\tnumActiveParties: 5,\n\t\t\t}));\n\t\t\tthis.sim.setPhase(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__wotlk_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from './raid_sim_ui.js';\n\nconst ui = new RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecTankDeathknight","parentElem","player","TankDeathknightSimUI","SpecDeathknight","DeathknightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecFeralTankDruid","FeralTankDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecHunter","HunterSimUI","SpecMage","MageSimUI","SpecRogue","RogueSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecHealingPriest","HealingPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecSmitePriest","SmitePriestSimUI","SpecWarrior","WarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","SpecWarlock","WarlockSimUI","playerPresets","spec","rotation","TankDeathknightPresets.DefaultRotation","talents","TankDeathknightPresets.BloodTalents","data","specOptions","TankDeathknightPresets.DefaultOptions","consumes","TankDeathknightPresets.DefaultConsumes","defaultName","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceTroll","defaultGear","TankDeathknightPresets.P1_BLOOD_BIS_PRESET","gear","tooltip","iconUrl","getSpecIcon","Class","ClassDeathknight","DeathknightPresets.DefaultBloodRotation","DeathknightPresets.BloodTalents","DeathknightPresets.DefaultBloodOptions","DeathknightPresets.DefaultConsumes","RaceOrc","DeathknightPresets.P1_BLOOD_BIS_PRESET","DeathknightPresets.DefaultFrostRotation","DeathknightPresets.FrostTalents","DeathknightPresets.DefaultFrostOptions","DeathknightPresets.P1_FROST_BIS_PRESET","otherDefaults","DeathknightPresets.OtherDefaults","DeathknightPresets.DefaultUnholyRotation","DeathknightPresets.UnholyDualWieldTalents","DeathknightPresets.DefaultUnholyOptions","DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET","BalanceDruidPresets.DefaultRotation","BalanceDruidPresets.StandardTalents","BalanceDruidPresets.DefaultOptions","BalanceDruidPresets.DefaultConsumes","BalanceDruidPresets.OtherDefaults","RaceNightElf","RaceTauren","BalanceDruidPresets.P1_PRESET","specNames","ClassDruid","FeralDruidPresets.DefaultRotation","FeralDruidPresets.StandardTalents","FeralDruidPresets.DefaultOptions","FeralDruidPresets.DefaultConsumes","FeralDruidPresets.P1_PRESET","FeralTankDruidPresets.DefaultRotation","FeralTankDruidPresets.StandardTalents","FeralTankDruidPresets.DefaultOptions","FeralTankDruidPresets.DefaultConsumes","FeralTankDruidPresets.P1_PRESET","RestorationDruidPresets.DefaultRotation","RestorationDruidPresets.CelestialFocusTalents","RestorationDruidPresets.DefaultOptions","RestorationDruidPresets.DefaultConsumes","RestorationDruidPresets.P1_PRESET","HunterPresets.DefaultRotation","HunterPresets.BeastMasteryTalents","HunterPresets.BMDefaultOptions","HunterPresets.DefaultConsumes","HunterPresets.MM_P1_PRESET","HunterPresets.MM_P2_PRESET","ClassHunter","HunterPresets.MarksmanTalents","HunterPresets.DefaultOptions","HunterPresets.SurvivalTalents","HunterPresets.SV_P1_PRESET","HunterPresets.SV_P2_PRESET","MagePresets.DefaultArcaneRotation","MagePresets.ArcaneTalents","MagePresets.DefaultArcaneOptions","MagePresets.DefaultArcaneConsumes","MagePresets.OtherDefaults","RaceGnome","MagePresets.ARCANE_P1_PRESET","MagePresets.ARCANE_P2_PRESET","ClassMage","MagePresets.DefaultFireRotation","MagePresets.FireTalents","MagePresets.DefaultFireOptions","MagePresets.DefaultFireConsumes","MagePresets.FIRE_P1_PRESET","MagePresets.FIRE_P2_PRESET","MagePresets.DefaultFrostRotation","MagePresets.FrostTalents","MagePresets.DefaultFrostOptions","MagePresets.DefaultFrostConsumes","MagePresets.FROST_P1_PRESET","MagePresets.FROST_P2_PRESET","RoguePresets.DefaultRotation","RoguePresets.AssassinationTalents","RoguePresets.DefaultOptions","RoguePresets.DefaultConsumes","RoguePresets.P1_PRESET_ASSASSINATION","ClassRogue","RoguePresets.CombatTalents","RoguePresets.P1_PRESET_COMBAT","ElementalShamanPresets.DefaultRotation","ElementalShamanPresets.StandardTalents","ElementalShamanPresets.DefaultOptions","ElementalShamanPresets.DefaultConsumes","RaceDraenei","ElementalShamanPresets.P1_PRESET","ClassShaman","EnhancementShamanPresets.DefaultRotation","EnhancementShamanPresets.StandardTalents","EnhancementShamanPresets.DefaultOptions","EnhancementShamanPresets.DefaultConsumes","EnhancementShamanPresets.P1_PRESET","RestorationShamanPresets.DefaultRotation","RestorationShamanPresets.RaidHealingTalents","RestorationShamanPresets.DefaultOptions","RestorationShamanPresets.DefaultConsumes","RestorationShamanPresets.P1_PRESET","HealingPriestPresets.DiscDefaultRotation","HealingPriestPresets.DiscTalents","HealingPriestPresets.DefaultOptions","HealingPriestPresets.DefaultConsumes","RaceDwarf","RaceUndead","HealingPriestPresets.DISC_P1_PRESET","ClassPriest","HealingPriestPresets.HolyDefaultRotation","HealingPriestPresets.HolyTalents","HealingPriestPresets.HOLY_P1_PRESET","ShadowPriestPresets.DefaultRotation","ShadowPriestPresets.StandardTalents","ShadowPriestPresets.DefaultOptions","ShadowPriestPresets.DefaultConsumes","ShadowPriestPresets.P1_PRESET","SmitePriestPresets.DefaultRotation","SmitePriestPresets.StandardTalents","SmitePriestPresets.DefaultOptions","SmitePriestPresets.DefaultConsumes","SmitePriestPresets.P1_PRESET","WarriorPresets.ArmsRotation","WarriorPresets.ArmsTalents","WarriorPresets.DefaultOptions","WarriorPresets.DefaultConsumes","WarriorPresets.P1_ARMS_PRESET","WarriorPresets.P2_ARMS_PRESET","ClassWarrior","WarriorPresets.DefaultRotation","WarriorPresets.FuryTalents","WarriorPresets.P1_FURY_PRESET","WarriorPresets.P2_FURY_PRESET","ProtectionWarriorPresets.DefaultRotation","ProtectionWarriorPresets.StandardTalents","ProtectionWarriorPresets.DefaultOptions","ProtectionWarriorPresets.DefaultConsumes","ProtectionWarriorPresets.P1_BALANCED_PRESET","HolyPaladinPresets.DefaultRotation","HolyPaladinPresets.StandardTalents","HolyPaladinPresets.DefaultOptions","HolyPaladinPresets.DefaultConsumes","RaceBloodElf","HolyPaladinPresets.P1_PRESET","ClassPaladin","ProtectionPaladinPresets.DefaultRotation","ProtectionPaladinPresets.GenericAoeTalents","ProtectionPaladinPresets.DefaultOptions","ProtectionPaladinPresets.DefaultConsumes","ProtectionPaladinPresets.P1_PRESET","RetributionPaladinPresets.DefaultRotation","RetributionPaladinPresets.AuraMasteryTalents","RetributionPaladinPresets.DefaultOptions","RetributionPaladinPresets.DefaultConsumes","RetributionPaladinPresets.P1_PRESET","RetributionPaladinPresets.P2_PRESET","RetributionPaladinPresets.P3_PRESET","RetributionPaladinPresets.P4_PRESET","RetributionPaladinPresets.P5_PRESET","WarlockPresets.AfflictionRotation","WarlockPresets.AfflictionTalents","WarlockPresets.AfflictionOptions","WarlockPresets.DefaultConsumes","WarlockPresets.P1_Preset_Affliction","WarlockPresets.P1_PreBiS_11","WarlockPresets.OtherDefaults","ClassWarlock","WarlockPresets.DemonologyRotation","WarlockPresets.DemonologyTalents","WarlockPresets.DemonologyOptions","WarlockPresets.P1_Preset_Demo_Destro","WarlockPresets.P1_PreBiS_14","WarlockPresets.DestructionRotation","WarlockPresets.DestructionTalents","WarlockPresets.DestructionOptions","implementedSpecs","Set","map","preset","RaidPicker","Component","constructor","parent","raidSimUI","super","this","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","currentDragParty","raid","sim","raidControls","document","createElement","classList","add","rootElem","appendChild","newPlayerPicker","NewPlayerPicker","EnumPicker","label","labelTooltip","values","name","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","eventID","newValue","setNumActiveParties","picker","factionChangeEmitter","getFaction","setFaction","phaseChangeEmitter","getPhase","setPhase","partiesContainer","partyPickers","getParties","party","i","PartyPicker","updateActiveParties","forEach","partyPicker","index","remove","on","ondragend","event","clearDragPlayer","clearDragParty","getCurrentFaction","getCurrentPhase","getPlayerPicker","raidIndex","Math","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","Array","keys","setDragPlayer","fromIndex","type","setDragParty","raidPicker","setAttribute","innerHTML","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","parties","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","target","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","TypedEvent","nextEventID","freezeAllAndDo","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","getData","length","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","playerProto","PlayerProto","fromBinary","localPlayer","Player","playerToSpec","fromProto","clone","update","isTankSpec","tanks","getTanks","emptyIdx","findIndex","tank","getPlayerFromRaidTarget","setTanks","concat","makeRaidTarget","newOptions","getSpecOptions","innervateTarget","newRaidTarget","getRaidIndex","setSpecOptions","powerInfusionTarget","focusMagicTarget","applyNewPlayerAssignments","emit","className","classCssClass","cssClassForClass","getClass","getName","querySelector","bindPlayerEvents","addEventListener","setName","emptyName","dragStart","playerDataProto","toProto","setData","btoa","String","fromCharCode","toBinary","editElem","copyElem","deleteElem","Tooltip","getOrCreateInstance","deleteTooltip","onclick","PlayerEditorModal","setDragImage","hide","BaseModal","closeButton","fixed","text","header","id","body","insertAdjacentHTML","editorRoot","getEnumValues","wowClass","ClassUnknown","matchingPresets","filter","specToClass","classPresetsContainer","matchingPreset","presetElemFragment","presetElem","children","dragImage","Image","src","applySharedDefaults","setRace","setRotation","setTalentsString","talentsString","setGlyphs","glyphs","Glyphs","create","setConsumes","setProfession1","profession1","Profession","Engineering","setProfession2","profession2","Jewelcrafting","setDistanceFromTarget","distanceFromTarget","waitForInit","then","setGear","db","lookupEquipmentSpec","RaidStats","categories","RAID_STATS_OPTIONS","sections","section","sectionElem","contentElem","categoryOptions","push","RaidStatsCategory","changeEmitter","c","options","counterElem","tooltipElem","effects","opt","RaidStatsEffect","playerData","class","statsLink","customClass","title","effect","total","sum","count","curPlayers","playerCssClass","textCssClassForClass","actionId","fill","getActivePlayers","p","condition","raidData","negateIf","val","cond","playerClass","clazz","extraCondition","isClass","playerClassAndTalentInternal","talentName","negateTalent","Boolean","getTalents","playerClassAndTalent","playerClassAndMissingTalent","playerSpecAndTalentInternal","isSpec","playerSpecAndTalent","raidBuff","buffName","getBuffs","isHealingSpec","isMeleeDpsSpec","isRangedDpsSpec","ActionId","fromSpellId","bloodlust","fromItemId","aura","PaladinAura","DevotionAura","getRotation","totems","earth","EarthTotem","StoneskinTotem","StrengthOfEarthTotem","summon","WarlockSummon","Felhunter","shout","WarriorShout","WarriorShoutBattle","water","WaterTotem","ManaSpringTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","TotemOfWrath","FlametongueTotem","WrathOfAirTotem","WarriorShoutCommanding","Imp","sunderArmor","SunderArmor","SunderArmorMaintain","exposeArmorFrequency","ExposeFrequency","Maintain","petType","HunterPetType","Worm","maintainFaerieFire","curse","WarlockCurse","Weakness","Wasp","Bat","includes","Rhino","MageRotationType","Fire","maintainImprovedScorch","Frost","Elements","maintainDemoShout","demoShoutChoice","maintainDemoralizingRoar","CarrionBird","maintainThunderClap","thunderClapChoice","sting","HunterStingType","ScorpidSting","RaidTab","SimTab","simUI","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","blessings","blessingsPicker","getAssignments","faction","phase","newRaid","RaidProto","setAssignments","BlessingsAssignments","changeEmitters","equals","a","b","toJson","fromJson","obj","loadUserData","RaidTargetPicker","Input","modObj","config","curPlayer","curRaidTarget","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","init","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevRaidTarget","RaidTarget","setInputValue","inputChanged","makeOptionElem","getInputElem","emptyRaidTarget","optionData","find","outerHTML","static","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","unholyFrenzyPicker","UnholyFrenzyPicker","focusMagicsPicker","FocusMagicsPicker","AssignedBuffPicker","targetPickers","getTitle","sourcePlayers","getSourcePlayers","sourcePlayer","sourcePlayerIndex","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","targetPlayer","powerInfusion","tricksOfTheTradeTarget","hysteria","unholyFrenzyTarget","BlessingsPicker","pickers","assignments","makeDefaultBlessings","specs","naturalSpecOrder","memeSpecs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","blessingPicker","IconEnumPicker","numColumns","color","classColors","Blessings","BlessingUnknown","BlessingOfKings","BlessingOfMight","BlessingOfWisdom","BlessingOfSanctuary","zeroValue","enableWhen","_picker","numPaladins","min","getClassCount","paladins","updatePickers","_eventID","fragment","titleIcons","icon","newAssignments","TanksPicker","tanksChangeEmitter","j","raid2","SettingsTab","column1","buildColumn","column2","column3","buildEncounterSettings","buildConsumesSettings","buildOtherSettings","buildTankSettings","buildAssignmentSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","encounter","showExecuteProportion","makeBooleanRaidIconBuffInput","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","field","IconPicker","states","buffsChangeEmitter","newBuffs","setBuffs","RaidJsonImporter","Importer","descriptionElem","onImport","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","close","RaidJsonExporter","Exporter","JSON","stringify","RaidWCLImporter","queryCounter","token","textElem","async","response","fetch","method","headers","Authorization","URLSearchParams","grant_type","json","access_token","query","getWCLBearerToken","Accept","queryURL","res","encodeURI","result","errors","errorStr","e","message","join","Error","console","debug","url","match","urlData","reportID","fightID","fightDataQuery","fights","queryWCL","reportData","report","importLink","importButton","disabled","style","cursor","doImport","error","alert","removeProperty","parseURL","getRateLimit","reportDataQuery","racialSpells","professionSpells","flat","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerDetails","entries","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","getEncounterProto","getRaidProto","clearRaid","guild","combatantInfoEvents","combatantInfo","auras","ability","source","getRace","log","raceNames","castEventsBySpellId","bucket","reportCastEvents","abilityGameID","sourceID","race","raceToFaction","inferredProfessions","profession","professionNames","professions","distinct","getGear","getProfessionRequirements","setProfessions","fightCastEvents","targetID","applyFunc","toRaidTarget","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","eventsAtTime","Object","spellTargets","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","allRaidIndexes","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","getAllPresetEncounters","enc","path","mob","Target","defaultProto","MAX_NUM_PARTIES","PartyProto","players","positionInParty","wclSpec","split","fullType","foundSpec","fullTypeToSpec","getMatchingPreset","toString","EquipmentSpec","items","ItemSpec","enchant","permanentEnchant","gems","gemInfo","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","abs","guid","targetIndex","other","DeathKnightBlood","DeathKnightLichborne","DeathKnightRuneblade","DeathKnightFrost","DeathKnightUnholy","DruidBalance","DruidFeral","DruidWarden","DruidGuardian","DruidRestoration","HunterBeastMastery","HunterSurvival","HunterMarksmanship","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","PriestSmite","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorChampion","WarriorWarrior","WarriorGladiator","WarriorProtection","Herbalism","Skinning","raidTarget","extraKnownIssues","SimUI","Sim","cssScheme","launchStatus","raidSimStatus","knownIssues","raidSimResultsManager","settingsMuuri","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","addLogTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","addRaidSimAction","simHeader","addImportLink","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","addTab","EmbeddedDetailedResults","LogRunner","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","TristateEffect","TristateEffectImproved","blessingOfWisdom","blessingOfSanctuary","numActiveParties","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","clear","getStorageKey","keyPart"],"mappings":"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"}