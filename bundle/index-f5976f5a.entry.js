import{T as e}from"./index-fa3065da.chunk.js";import{S as t,aA as a,bI as s,d0 as r,x as n,aJ as i,C as l,b6 as o,T as c,ac as d,ai as p,d1 as m,aw as h,z as u,L as g,_ as f,ae as y,a9 as S,bi as I,d2 as b,d3 as P,A as D,ch as k,cg as E,d4 as C,d5 as R,bC as w,d6 as v,cH as T,cB as U,cf as A,d7 as O,cW as H,ci as F,cN as W,s as B,aO as x,d8 as M,an as L,d9 as N,I as G,am as $,a8 as j,da as V,X as q,db as z,aN as J,dc as K,bA as _,dd as X,by as Q,de as Z,$ as Y,bz as ee,df as te,E as ae,ah as se,bJ as re,bK as ne,dg as ie,bQ as le,bT as oe,aV as ce}from"./detailed_results-71928620.chunk.js";import{a5 as de,a6 as pe,P as me,a7 as he,a8 as ue,a9 as ge,x as fe,aa as ye,C as Se,ab as Ie,ac as be,z as Pe,ad as De,ae as ke,af as Ee,ag as Ce,ah as Re,S as we,ai as ve,aj as Te}from"./individual_sim_ui-acc75452.chunk.js";import{T as Ue,D as Ae,B as Oe,a as He,b as Fe,P as We}from"./sim-89085cec.chunk.js";import{D as Be,a as xe,B as Me,b as Le,c as Ne,P as Ge,d as $e,F as je,e as Ve,f as qe,O as ze,g as Je,U as Ke,h as _e,i as Xe}from"./sim-3788c067.chunk.js";import{B as Qe,D as Ze,S as Ye,a as et,b as tt,O as at,P as st}from"./sim-267464af.chunk.js";import{F as rt,D as nt,S as it,a as lt,b as ot,P as ct}from"./sim-40a74318.chunk.js";import{F as dt,D as pt,S as mt,a as ht,b as ut,P as gt}from"./sim-b0613c11.chunk.js";import{R as ft,D as yt,C as St,a as It,b as bt,P as Pt}from"./sim-aa03459a.chunk.js";import{E as Dt,D as kt,S as Et,a as Ct,b as Rt,P as wt}from"./sim-a0eb7cf8.chunk.js";import{E as vt,D as Tt,S as Ut,a as At,b as Ot,P as Ht}from"./sim-a5d77711.chunk.js";import{R as Ft,D as Wt,a as Bt,b as xt,c as Mt,P as Lt}from"./sim-faa420f1.chunk.js";import{H as Nt,D as Gt,B as $t,a as jt,b as Vt,M as qt,c as zt,d as Jt,e as Kt,S as _t,f as Xt,g as Qt}from"./sim-92736f95.chunk.js";import{M as Zt,D as Yt,A as ea,a as ta,b as aa,O as sa,c as ra,d as na,e as ia,F as la,f as oa,g as ca,h as da,i as pa,j as ma,k as ha,l as ua,m as ga,n as fa,o as ya}from"./sim-1419bc3b.chunk.js";import{R as Sa,D as Ia,A as ba,a as Pa,b as Da,P as ka,C as Ea,c as Ca}from"./sim-15e3a4f6.chunk.js";import{H as Ra,D as wa,S as va,a as Ta,b as Ua,P as Aa}from"./sim-13a8f66d.chunk.js";import{P as Oa,D as Ha,G as Fa,a as Wa,b as Ba,c as xa}from"./sim-ec140b86.chunk.js";import{R as Ma,D as La,A as Na,a as Ga,b as $a,P as ja,c as Va,d as qa,e as za,f as Ja}from"./sim-6753ff9c.chunk.js";import{H as Ka,D as _a,a as Xa,b as Qa,c as Za,d as Ya,e as es,f as ts,g as as}from"./sim-62218a64.chunk.js";import{S as ss,D as rs,a as ns,b as is,c as ls,P as os}from"./sim-56b2c322.chunk.js";import{S as cs,D as ds,a as ps,b as ms,c as hs,P as us}from"./sim-969a2744.chunk.js";import{W as gs,A as fs,a as ys,D as Ss,b as Is,P as bs,c as Ps,d as Ds,F as ks,e as Es,f as Cs}from"./sim-0decc570.chunk.js";import{P as Rs,D as ws,S as vs,a as Ts,b as Us,c as As}from"./sim-82106559.chunk.js";import{W as Os,A as Hs,a as Fs,b as Ws,D as Bs,P as xs,c as Ms,O as Ls,d as Ns,e as Gs,f as $s,g as js,h as Vs,i as qs,j as zs,k as Js}from"./sim-4b725ca7.chunk.js";import"./totem_inputs-d706cdd3.chunk.js";const Ks={[t.SpecTankDeathknight]:(e,t)=>new Ue(e,t),[t.SpecDeathknight]:(e,t)=>new Be(e,t),[t.SpecBalanceDruid]:(e,t)=>new Qe(e,t),[t.SpecFeralDruid]:(e,t)=>new rt(e,t),[t.SpecFeralTankDruid]:(e,t)=>new dt(e,t),[t.SpecRestorationDruid]:(e,t)=>new ft(e,t),[t.SpecElementalShaman]:(e,t)=>new Dt(e,t),[t.SpecEnhancementShaman]:(e,t)=>new vt(e,t),[t.SpecRestorationShaman]:(e,t)=>new Ft(e,t),[t.SpecHunter]:(e,t)=>new Nt(e,t),[t.SpecMage]:(e,t)=>new Zt(e,t),[t.SpecRogue]:(e,t)=>new Sa(e,t),[t.SpecHolyPaladin]:(e,t)=>new Ra(e,t),[t.SpecProtectionPaladin]:(e,t)=>new Oa(e,t),[t.SpecRetributionPaladin]:(e,t)=>new Ma(e,t),[t.SpecHealingPriest]:(e,t)=>new Ka(e,t),[t.SpecShadowPriest]:(e,t)=>new ss(e,t),[t.SpecSmitePriest]:(e,t)=>new cs(e,t),[t.SpecWarrior]:(e,t)=>new gs(e,t),[t.SpecProtectionWarrior]:(e,t)=>new Rs(e,t),[t.SpecWarlock]:(e,t)=>new Os(e,t)},_s=[{spec:t.SpecTankDeathknight,rotation:Ae,talents:Oe.data,specOptions:He,consumes:Fe,defaultName:"Blood Tank",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:We.gear},[a.Horde]:{1:We.gear}},tooltip:"Blood Tank Death Knight",iconUrl:r(n.ClassDeathknight,0)},{spec:t.SpecDeathknight,rotation:xe,talents:Me.data,specOptions:Le,consumes:Ne,defaultName:"Blood DPS",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Ge.gear},[a.Horde]:{1:Ge.gear}},tooltip:"Blood DPS Death Knight",iconUrl:r(n.ClassDeathknight,3)},{spec:t.SpecDeathknight,rotation:$e,talents:je.data,specOptions:Ve,consumes:Ne,defaultName:"Frost",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:qe.gear},[a.Horde]:{1:qe.gear}},otherDefaults:ze,tooltip:"Frost Death Knight",iconUrl:r(n.ClassDeathknight,1)},{spec:t.SpecDeathknight,rotation:Je,talents:Ke.data,specOptions:_e,consumes:Ne,defaultName:"Unholy",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Xe.gear},[a.Horde]:{1:Xe.gear}},otherDefaults:ze,tooltip:"Dual-Wield Unholy DK",iconUrl:r(n.ClassDeathknight,2)},{spec:t.SpecBalanceDruid,rotation:Ze,talents:Ye.data,specOptions:et,consumes:tt,otherDefaults:at,defaultName:"Balance",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:st.gear},[a.Horde]:{1:st.gear}},tooltip:i[t.SpecBalanceDruid],iconUrl:r(n.ClassDruid,0)},{spec:t.SpecFeralDruid,rotation:nt,talents:it.data,specOptions:lt,consumes:ot,defaultName:"Cat",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ct.gear},[a.Horde]:{1:ct.gear}},tooltip:i[t.SpecFeralDruid],iconUrl:r(n.ClassDruid,3)},{spec:t.SpecFeralTankDruid,rotation:pt,talents:mt.data,specOptions:ht,consumes:ut,defaultName:"Bear",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:gt.gear},[a.Horde]:{1:gt.gear}},tooltip:i[t.SpecFeralTankDruid],iconUrl:r(n.ClassDruid,1)},{spec:t.SpecRestorationDruid,rotation:yt,talents:St.data,specOptions:It,consumes:bt,defaultName:"Restoration",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Pt.gear},[a.Horde]:{1:Pt.gear}},tooltip:i[t.SpecRestorationDruid],iconUrl:r(n.ClassDruid,2)},{spec:t.SpecHunter,rotation:Gt,talents:$t.data,specOptions:jt,consumes:Vt,defaultName:"Beast Mastery",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:qt.gear,2:zt.gear},[a.Horde]:{1:qt.gear,2:zt.gear}},tooltip:"Beast Mastery Hunter",iconUrl:r(n.ClassHunter,0)},{spec:t.SpecHunter,rotation:Gt,talents:Jt.data,specOptions:Kt,consumes:Vt,defaultName:"Marksmanship",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:qt.gear,2:zt.gear},[a.Horde]:{1:qt.gear,2:zt.gear}},tooltip:"Marksmanship Hunter",iconUrl:r(n.ClassHunter,1)},{spec:t.SpecHunter,rotation:Gt,talents:_t.data,specOptions:Kt,consumes:Vt,defaultName:"Survival",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Xt.gear,2:Qt.gear},[a.Horde]:{1:Xt.gear,2:Qt.gear}},tooltip:"Survival Hunter",iconUrl:r(n.ClassHunter,2)},{spec:t.SpecMage,rotation:Yt,talents:ea.data,specOptions:ta,consumes:aa,otherDefaults:sa,defaultName:"Arcane",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceGnome,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ra.gear,2:na.gear},[a.Horde]:{1:ra.gear,2:na.gear}},tooltip:"Arcane Mage",iconUrl:r(n.ClassMage,0)},{spec:t.SpecMage,rotation:ia,talents:la.data,specOptions:oa,consumes:ca,otherDefaults:sa,defaultName:"Fire",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceGnome,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:da.gear,2:pa.gear},[a.Horde]:{1:da.gear,2:pa.gear}},tooltip:"Fire Mage",iconUrl:r(n.ClassMage,1)},{spec:t.SpecMage,rotation:ma,talents:ha.data,specOptions:ua,consumes:ga,otherDefaults:sa,defaultName:"Frost",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceGnome,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:fa.gear,2:ya.gear},[a.Horde]:{1:fa.gear,2:ya.gear}},tooltip:"Frost Mage",iconUrl:r(n.ClassMage,2)},{spec:t.SpecRogue,rotation:Ia,talents:ba.data,specOptions:Pa,consumes:Da,defaultName:"Assassination",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ka.gear},[a.Horde]:{1:ka.gear}},tooltip:"Assassination Rogue",iconUrl:r(n.ClassRogue,0)},{spec:t.SpecRogue,rotation:Ia,talents:Ea.data,specOptions:Pa,consumes:Da,defaultName:"Combat",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Ca.gear},[a.Horde]:{1:Ca.gear}},tooltip:"Combat Rogue",iconUrl:r(n.ClassRogue,1)},{spec:t.SpecElementalShaman,rotation:kt,talents:Et.data,specOptions:Ct,consumes:Rt,defaultName:"Elemental",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDraenei,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:wt.gear},[a.Horde]:{1:wt.gear}},tooltip:i[t.SpecElementalShaman],iconUrl:r(n.ClassShaman,0)},{spec:t.SpecEnhancementShaman,rotation:Tt,talents:Ut.data,specOptions:At,consumes:Ot,defaultName:"Enhancement",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDraenei,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Ht.gear},[a.Horde]:{1:Ht.gear}},tooltip:i[t.SpecEnhancementShaman],iconUrl:r(n.ClassShaman,1)},{spec:t.SpecRestorationShaman,rotation:Wt,talents:Bt.data,specOptions:xt,consumes:Mt,defaultName:"Restoration",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDraenei,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Lt.gear},[a.Horde]:{1:Lt.gear}},tooltip:i[t.SpecRestorationShaman],iconUrl:r(n.ClassShaman,2)},{spec:t.SpecHealingPriest,rotation:_a,talents:Xa.data,specOptions:Qa,consumes:Za,defaultName:"Discipline",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Ya.gear},[a.Horde]:{1:Ya.gear}},tooltip:"Discipline Priest",iconUrl:r(n.ClassPriest,0)},{spec:t.SpecHealingPriest,rotation:es,talents:ts.data,specOptions:Qa,consumes:Za,defaultName:"Holy",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:as.gear},[a.Horde]:{1:as.gear}},tooltip:"Holy Priest",iconUrl:r(n.ClassPriest,1)},{spec:t.SpecShadowPriest,rotation:rs,talents:ns.data,specOptions:is,consumes:ls,defaultName:"Shadow",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:os.gear},[a.Horde]:{1:os.gear}},tooltip:i[t.SpecShadowPriest],iconUrl:r(n.ClassPriest,2)},{spec:t.SpecSmitePriest,rotation:ds,talents:ps.data,specOptions:ms,consumes:hs,defaultName:"Smite",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:us.gear},[a.Horde]:{1:us.gear}},tooltip:i[t.SpecSmitePriest],iconUrl:r(n.ClassPriest,3)},{spec:t.SpecWarrior,rotation:fs,talents:ys.data,specOptions:Ss,consumes:Is,defaultName:"Arms",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:bs.gear,2:Ps.gear},[a.Horde]:{1:bs.gear,2:Ps.gear}},tooltip:"Arms Warrior",iconUrl:r(n.ClassWarrior,0)},{spec:t.SpecWarrior,rotation:Ds,talents:ks.data,specOptions:Ss,consumes:Is,defaultName:"Fury",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Es.gear,2:Cs.gear},[a.Horde]:{1:Es.gear,2:Cs.gear}},tooltip:"Fury Warrior",iconUrl:r(n.ClassWarrior,1)},{spec:t.SpecProtectionWarrior,rotation:ws,talents:vs.data,specOptions:Ts,consumes:Us,defaultName:"Protection",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:As.gear},[a.Horde]:{1:As.gear}},tooltip:"Protection Warrior",iconUrl:r(n.ClassWarrior,2)},{spec:t.SpecHolyPaladin,rotation:wa,talents:va.data,specOptions:Ta,consumes:Ua,defaultName:"Holy",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceBloodElf},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Aa.gear},[a.Horde]:{1:Aa.gear}},tooltip:"Holy Paladin",iconUrl:r(n.ClassPaladin,0)},{spec:t.SpecProtectionPaladin,rotation:Ha,talents:Fa.data,specOptions:Wa,consumes:Ba,defaultName:"Protection",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceBloodElf},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:xa.gear},[a.Horde]:{1:xa.gear}},tooltip:"Protection Paladin",iconUrl:r(n.ClassPaladin,1)},{spec:t.SpecRetributionPaladin,rotation:La,talents:Na.data,specOptions:Ga,consumes:$a,defaultName:"Retribution",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceBloodElf},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ja.gear,2:Va.gear,3:qa.gear,4:za.gear,5:Ja.gear},[a.Horde]:{1:ja.gear,2:Va.gear,3:qa.gear,4:za.gear,5:Ja.gear}},tooltip:"Retribution Paladin",iconUrl:r(n.ClassPaladin,2)},{spec:t.SpecWarlock,rotation:Hs,talents:Fs.data,specOptions:Ws,consumes:Bs,defaultName:"Affliction",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{1:xs.gear,2:Ms.gear},[a.Alliance]:{1:xs.gear,2:Ms.gear},[a.Horde]:{1:xs.gear,2:Ms.gear}},otherDefaults:Ls,tooltip:"Affliction Warlock",iconUrl:r(n.ClassWarlock,0)},{spec:t.SpecWarlock,rotation:Ns,talents:Gs.data,specOptions:$s,consumes:Bs,defaultName:"Demonology",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{1:js.gear,2:Vs.gear},[a.Alliance]:{1:js.gear,2:Vs.gear},[a.Horde]:{1:js.gear,2:Vs.gear}},otherDefaults:Ls,tooltip:"Demonology Warlock",iconUrl:r(n.ClassWarlock,1)},{spec:t.SpecWarlock,rotation:qs,talents:zs.data,specOptions:Js,consumes:Bs,defaultName:"Destruction",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{1:js.gear,2:Vs.gear},[a.Alliance]:{1:js.gear,2:Vs.gear},[a.Horde]:{1:js.gear,2:Vs.gear}},otherDefaults:Ls,tooltip:"Destruction Warlock",iconUrl:r(n.ClassWarlock,2)}],Xs=[...new Set(_s.map((e=>e.spec)))];class Qs extends l{constructor(e,t){super(e,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=t,this.raid=t.sim.raid;const s=document.createElement("div");s.classList.add("raid-controls"),this.rootElem.appendChild(s),this.newPlayerPicker=new tr(this.rootElem,this),new de(s,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:e=>e.numActivePartiesChangeEmitter,getValue:e=>e.getNumActiveParties(),setValue:(e,t,a)=>{t.setNumActiveParties(e,a)}}),new de(s,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:a.Alliance},{name:"Horde",value:a.Horde}],changedEvent:e=>this.raid.sim.factionChangeEmitter,getValue:e=>this.raid.sim.getFaction(),setValue:(e,t,a)=>{this.raid.sim.setFaction(e,a)}}),new de(s,this.newPlayerPicker,{label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[{name:"Phase 1",value:1}],changedEvent:e=>this.raid.sim.phaseChangeEmitter,getValue:e=>this.raid.sim.getPhase(),setValue:(e,t,a)=>{this.raid.sim.setPhase(e,a)}});const r=document.createElement("div");r.classList.add("parties-container"),this.rootElem.appendChild(r),this.partyPickers=this.raid.getParties().map(((e,t)=>new Zs(r,e,t,this)));const n=()=>{this.partyPickers.forEach((e=>{e.index<this.raidSimUI.sim.raid.getNumActiveParties()?e.rootElem.classList.add("active"):e.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(n),n(),this.rootElem.ondragend=e=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/pe)].playerPickers[e%pe]}getPlayerPickers(){return[...new Array(25).keys()].map((e=>this.getPlayerPicker(e)))}setDragPlayer(e,t,a){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=a,-1!=t){this.getPlayerPicker(t).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(-1!=this.currentDragPlayerFromIndex){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1}setDragParty(e){this.currentDragParty=e,e.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class Zs extends l{constructor(e,t,a,s){super(e,"party-picker-root"),this.party=t,this.index=a,this.raidPicker=s,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${a+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const r=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(pe).keys()].map((e=>new Ys(r,this,e)));const n=this.rootElem.getElementsByClassName("party-results-dps")[0],i=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return n.textContent="",void(i.textContent="");n.textContent=a.toFixed(1),t?o(i,s,a,1):i.textContent=""})),this.rootElem.ondragstart=e=>{e.target==this.rootElem&&(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let l=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(l++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(l--,l<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=e=>{if(!this.raidPicker.currentDragParty)return;e.preventDefault(),l=0,this.rootElem.classList.remove("dragto");const t=c.nextEventID();c.freezeAllAndDo((()=>{const e=this.raidPicker.currentDragParty;for(let a=0;a<pe;a++){const s=e.playerPickers[a],r=this.playerPickers[a],n=s.player,i=r.player;s.setPlayer(t,i,3),r.setPlayer(t,n,3)}})),this.raidPicker.clearDragParty()}}}class Ys extends l{constructor(e,t,a){super(e,"player-picker-root"),this.index=a,this.raidIndex=t.index*pe+a,this.player=null,this.partyPicker=t,this.raidPicker=t.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((e=>{const t=this.partyPicker.party.getPlayer(this.index);t!=this.player&&this.setPlayer(e,t,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=a.toFixed(1),t&&o(this.referenceDeltaElem,s,a,1))}));let s=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s--,s<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>e.preventDefault(),this.rootElem.ondrop=e=>{if(this.raidPicker.currentDragParty)return;var t=e.dataTransfer.getData("text/plain");e.preventDefault(),s=0,this.rootElem.classList.remove("dragto");const a=c.nextEventID();c.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==t.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(-1!=this.raidPicker.currentDragPlayerFromIndex){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==e?t.setPlayer(a,this.player,e):2==e&&t.setPlayer(a,null,e)}else if(null==this.raidPicker.currentDragPlayer){const e=atob(t),r=new Uint8Array(e.length);for(let t=0;t<r.length;t++)r[t]=e.charCodeAt(t);const n=d.fromBinary(r);var s=new me(p(n),this.raidPicker.raidSimUI.sim);s.fromProto(a,n),this.raidPicker.currentDragPlayer=s}4==e?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),e):this.setPlayer(a,this.raidPicker.currentDragPlayer,e),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(e,a,s){a!=this.player&&(c.freezeAllAndDo((()=>{this.player=a,a?(this.partyPicker.party.setPlayer(e,this.index,a),1==s&&function(e,a,s){if(y(a.spec)){const t=s.getTanks(),r=t.findIndex((e=>null==s.getPlayerFromRaidTarget(e)));-1==r?t.length<3&&s.setTanks(e,t.concat([a.makeRaidTarget()])):(t[r]=a.makeRaidTarget(),s.setTanks(e,t))}if(a.spec==t.SpecBalanceDruid){const t=a.getSpecOptions();t.innervateTarget=S(a.getRaidIndex()),a.setSpecOptions(e,t)}else if(a.spec==t.SpecSmitePriest){const t=a.getSpecOptions();t.powerInfusionTarget=S(a.getRaidIndex()),a.setSpecOptions(e,t)}else if(a.spec==t.SpecMage){const t=a.getSpecOptions();t.focusMagicTarget=S(a.getRaidIndex()),a.setSpecOptions(e,t)}}(e,a,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(e,this.index,a),this.partyPicker.party.compChangeEmitter.emit(e))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const e=m(this.player.getClass());this.rootElem.className=`player-picker-root player bg-${e}-dampened`,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="false"/>\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${e}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="false"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="false"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(e=>{this.player?.setName(c.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(e=>{this.rootElem.setAttribute("draggable","false"),this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(e=>{this.rootElem.setAttribute("draggable","true"),this.partyPicker.rootElem.setAttribute("draggable","true")}));const t="Unnamed";this.nameElem?.addEventListener("focusout",(e=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=t,this.player?.setName(c.nextEventID(),t))}));const a=(e,t)=>{if(null!=this.player){if(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.player){var a=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...d.toBinary(a))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,t)}else e.preventDefault()},s=this.rootElem.querySelector(".player-edit"),r=this.rootElem.querySelector(".player-copy"),n=this.rootElem.querySelector(".player-delete");this.rootElem.ondragstart=e=>{e.target!=r&&a(e,3)},e.getOrCreateInstance(s),e.getOrCreateInstance(r);const i=e.getOrCreateInstance(n);s.onclick=e=>{new er(this.player)},r.ondragstart=e=>{e.dataTransfer.setDragImage(this.rootElem,20,20),a(e,4)},n.onclick=e=>{i.hide(),this.setPlayer(c.nextEventID(),null,0)}}}class er extends he{constructor(e){super("player-editor-modal",{closeButton:{fixed:!0,text:!1},header:!1}),this.rootElem.id="playerEditorModal",this.body.insertAdjacentHTML("beforeend",'\n\t\t\t<div class="player-editor within-raid-sim"></div>\n\t\t');const t=this.rootElem.getElementsByClassName("player-editor")[0];Ks[e.spec](t,e)}}class tr extends l{constructor(t,a){super(t,"new-player-picker-root"),this.raidPicker=a,h(n).forEach((t=>{if(t==n.ClassUnknown)return;const a=_s.filter((e=>u[e.spec]==t));if(0==a.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${m(t)}-dampened`),this.rootElem.appendChild(s),a.forEach((t=>{const a=document.createElement("fragment");a.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="${t.tooltip}"\n\t\t\t\t\t\tdata-bs-html="true"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${t.iconUrl}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const r=a.children[0];s.appendChild(r),e.getOrCreateInstance(r),r.ondragstart=e=>{const a=c.nextEventID();c.freezeAllAndDo((()=>{const s=new Image;s.src=t.iconUrl,e.dataTransfer.setDragImage(s,30,30),e.dataTransfer.setData("text/plain",""),e.dataTransfer.dropEffect="copy";const r=new me(t.spec,this.raidPicker.raid.sim);r.applySharedDefaults(a),r.setRace(a,t.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setRotation(a,t.rotation),r.setTalentsString(a,t.talents.talentsString),r.setGlyphs(a,t.talents.glyphs||g.create()),r.setSpecOptions(a,t.specOptions),r.setConsumes(a,t.consumes),r.setName(a,t.defaultName),r.setProfession1(a,t.otherDefaults?.profession1||f.Engineering),r.setProfession2(a,t.otherDefaults?.profession2||f.Jewelcrafting),r.setDistanceFromTarget(a,t.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{r.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(t.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(r,-1,1)}))}}))}))}}class ar extends l{constructor(e,t){super(e,"raid-stats");let a=[];hr.sections.forEach((e=>{const s=document.createElement("div");s.classList.add("raid-stats-section"),this.rootElem.appendChild(s),s.innerHTML=`\n\t\t\t\t<div class="raid-stats-section-header">\n\t\t\t\t\t<label class="raid-stats-section-label form-label">${e.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class="raid-stats-section-content"></div>\n\t\t\t`;const r=s.getElementsByClassName("raid-stats-section-content")[0];e.categories.forEach((e=>{a.push(new sr(r,t,e))}))})),this.categories=a,t.changeEmitter.on((e=>this.categories.forEach((e=>e.update()))))}}class sr extends l{constructor(t,a,s){if(super(t,"raid-stats-category-root"),this.raidSimUI=a,this.options=s,this.rootElem.innerHTML=`\n\t\t\t<a href="javascript:void(0)" role="button" class="raid-stats-category">\n\t\t\t\t<span class="raid-stats-category-counter"></span>\n\t\t\t\t<span class="raid-stats-category-label">${s.label}</span>\n\t\t\t</a>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-category-counter"),this.tooltipElem=document.createElement("div"),this.tooltipElem.innerHTML=`\n\t\t\t<label class="raid-stats-category-label">${s.label}</label>\n\t\t`,this.effects=s.effects.map((e=>new rr(this.tooltipElem,a,e))),1!=s.effects.length||s.effects[0].playerData?.class){const t=this.rootElem.querySelector(".raid-stats-category");t.setAttribute("data-bs-toggle","tooltip"),t.setAttribute("data-bs-placement","right"),t.setAttribute("data-bs-html","true"),e.getOrCreateInstance(t,{customClass:"raid-stats-category-tooltip",title:this.tooltipElem})}}update(){this.effects.forEach((e=>e.update()));const e=B(this.effects.map((e=>e.count)));this.counterElem.textContent=String(e);const t=this.rootElem.querySelector(".raid-stats-category");0==e?t?.classList.remove("active"):t?.classList.add("active")}}class rr extends l{constructor(e,t,a){if(super(e,"raid-stats-effect"),this.raidSimUI=t,this.options=a,this.curPlayers=[],this.count=0,this.rootElem.innerHTML=`\n\t\t\t<span class="raid-stats-effect-counter"></span>\n\t\t\t<img class="raid-stats-effect-icon"></img>\n\t\t\t<span class="raid-stats-effect-label">${a.label}</span>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-effect-counter"),this.options.playerData?.class){const e=this.rootElem.querySelector(".raid-stats-effect-label"),t=x(this.options.playerData.class);e.classList.add(t)}const s=this.rootElem.querySelector(".raid-stats-effect-icon");a.actionId?a.actionId.fill().then((e=>s.src=e.iconUrl)):s.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((e=>this.options.playerData.condition(e))));const e=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(e?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function nr(e,t){return t?!e:e}function ir(e,t){return{class:e,condition:a=>a.isClass(e)&&(!t||t(a))}}function lr(e,t,a,s){return{class:e,condition:r=>r.isClass(e)&&nr(Boolean(r.getTalents()[t]),a)&&(!s||s(r))}}function or(e,t,a){return lr(e,t,!1,a)}function cr(e,t,a){return lr(e,t,!0,a)}function dr(e,t,a,s){return{class:u[e],condition:r=>r.isSpec(e)&&nr(Boolean(r.getTalents()[t]),a)&&(!s||s(r))}}function pr(e,t,a){return dr(e,t,!1,a)}function mr(e){return t=>Boolean(t.getBuffs()[e])}const hr={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:e=>y(e.spec)}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:e=>I(e.spec)}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:e=>b(e.spec)}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:e=>P(e.spec)}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:D.fromSpellId(2825),playerData:ir(n.ClassShaman,(e=>e.getSpecOptions().bloodlust))}]},{label:"Stats",effects:[{label:"Improved Gift of the Wild",actionId:D.fromSpellId(17051),playerData:or(n.ClassDruid,"improvedMarkOfTheWild")},{label:"Gift of the Wild",actionId:D.fromSpellId(48470),playerData:cr(n.ClassDruid,"improvedMarkOfTheWild")},{label:"Drums of the Wild",actionId:D.fromItemId(49634),raidData:mr("drumsOfTheWild")}]},{label:"Stats %",effects:[{label:"Blessing of Kings",actionId:D.fromSpellId(25898),playerData:ir(n.ClassPaladin)},{label:"Drums of Forgotten Kings",actionId:D.fromItemId(49633),raidData:mr("drumsOfForgottenKings")},{label:"Blessing of Sanctuary",actionId:D.fromSpellId(25899),playerData:ir(n.ClassPaladin)}]},{label:"Armor",effects:[{label:"Improved Devotion Aura",actionId:D.fromSpellId(20140),playerData:or(n.ClassPaladin,"improvedDevotionAura",(e=>e.getSpecOptions().aura==U.DevotionAura))},{label:"Devotion Aura",actionId:D.fromSpellId(48942),playerData:cr(n.ClassPaladin,"improvedDevotionAura",(e=>e.getSpecOptions().aura==U.DevotionAura))},{label:"Improved Stoneskin Totem",actionId:D.fromSpellId(16293),playerData:or(n.ClassShaman,"guardianTotems",(e=>e.getRotation().totems?.earth==A.StoneskinTotem))},{label:"Stoneskin Totem",actionId:D.fromSpellId(58753),playerData:cr(n.ClassShaman,"guardianTotems",(e=>e.getRotation().totems?.earth==A.StoneskinTotem))},{label:"Scroll of Protection",actionId:D.fromItemId(43468),raidData:mr("scrollOfProtection")}]},{label:"Stamina",effects:[{label:"Improved Power Word Fortitude",actionId:D.fromSpellId(14767),playerData:or(n.ClassPriest,"improvedPowerWordFortitude")},{label:"Power Word Fortitude",actionId:D.fromSpellId(48161),playerData:cr(n.ClassPriest,"improvedPowerWordFortitude")},{label:"Scroll of Stamina",actionId:D.fromItemId(37094),raidData:mr("scrollOfStamina")}]},{label:"Str + Agi",effects:[{label:"Improved Strength of Earth Totem",actionId:D.fromSpellId(52456),playerData:or(n.ClassShaman,"enhancingTotems",(e=>e.getRotation().totems?.earth==A.StrengthOfEarthTotem))},{label:"Strength of Earth Totem",actionId:D.fromSpellId(58643),playerData:cr(n.ClassShaman,"enhancingTotems",(e=>e.getRotation().totems?.earth==A.StrengthOfEarthTotem))},{label:"Horn of Winter",actionId:D.fromSpellId(57623),playerData:ir(n.ClassDeathknight)},{label:"Scroll of Strength",actionId:D.fromItemId(43466),raidData:mr("scrollOfStrength")},{label:"Scroll of Agility",actionId:D.fromItemId(43464),raidData:mr("scrollOfAgility")}]},{label:"Intellect",effects:[{label:"Arcane Brilliance",actionId:D.fromSpellId(43002),playerData:ir(n.ClassMage)},{label:"Improved Fel Intelligence",actionId:D.fromSpellId(54038),playerData:or(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Fel Intelligence",actionId:D.fromSpellId(57567),playerData:cr(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Scroll of Intellect",actionId:D.fromItemId(37092),raidData:mr("scrollOfIntellect")}]},{label:"Spirit",effects:[{label:"Divine Spirit",actionId:D.fromSpellId(48073),playerData:ir(n.ClassPriest)},{label:"Improved Fel Intelligence",actionId:D.fromSpellId(54038),playerData:or(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Fel Intelligence",actionId:D.fromSpellId(57567),playerData:cr(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Scroll of Spirit",actionId:D.fromItemId(37098),raidData:mr("scrollOfSpirit")}]},{label:"Atk Pwr",effects:[{label:"Improved Blessing of Might",actionId:D.fromSpellId(20045),playerData:ir(n.ClassPaladin)},{label:"Blessing of Might",actionId:D.fromSpellId(48934),playerData:ir(n.ClassPaladin)},{label:"Improved Battle Shout",actionId:D.fromSpellId(12861),playerData:or(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutBattle))},{label:"Battle Shout",actionId:D.fromSpellId(47436),playerData:cr(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutBattle))}]},{label:"Atk Pwr %",effects:[{label:"Abomination's Might",actionId:D.fromSpellId(53138),playerData:or(n.ClassDeathknight,"abominationsMight")},{label:"Unleashed Rage",actionId:D.fromSpellId(30809),playerData:or(n.ClassShaman,"unleashedRage")},{label:"Trueshot Aura",actionId:D.fromSpellId(19506),playerData:or(n.ClassHunter,"trueshotAura")}]},{label:"Damage %",effects:[{label:"Sanctified Retribution",actionId:D.fromSpellId(31869),playerData:or(n.ClassPaladin,"sanctifiedRetribution")},{label:"Arcane Empowerment",actionId:D.fromSpellId(31583),playerData:or(n.ClassMage,"arcaneEmpowerment")},{label:"Ferocious Inspiration",actionId:D.fromSpellId(34460),playerData:or(n.ClassHunter,"ferociousInspiration")}]},{label:"Mit %",effects:[{label:"Renewed Hope",actionId:D.fromSpellId(57472),playerData:or(n.ClassPriest,"renewedHope")},{label:"Blessing Of Sanctuary",actionId:D.fromSpellId(25899),playerData:ir(n.ClassPaladin)},{label:"Vigilance",actionId:D.fromSpellId(50720),playerData:or(n.ClassWarrior,"vigilance")}]},{label:"Haste %",effects:[{label:"Swift Retribution",actionId:D.fromSpellId(53648),playerData:or(n.ClassPaladin,"swiftRetribution")},{label:"Improved Moonkin Form",actionId:D.fromSpellId(48396),playerData:or(n.ClassDruid,"improvedMoonkinForm")}]},{label:"MP5",effects:[{label:"Improved Blessing of Wisdom",actionId:D.fromSpellId(20245),playerData:or(n.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Blessing of Wisdom",actionId:D.fromSpellId(48938),playerData:cr(n.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Improved Mana Spring Totem",actionId:D.fromSpellId(16206),playerData:or(n.ClassShaman,"restorativeTotems",(e=>e.getRotation().totems?.water==F.ManaSpringTotem))},{label:"Mana Spring Totem",actionId:D.fromSpellId(58774),playerData:cr(n.ClassShaman,"restorativeTotems",(e=>e.getRotation().totems?.water==F.ManaSpringTotem))}]},{label:"Melee Crit",effects:[{label:"Leader of the Pack",actionId:D.fromSpellId(17007),playerData:or(n.ClassDruid,"leaderOfThePack")},{label:"Rampage",actionId:D.fromSpellId(29801),playerData:or(n.ClassWarrior,"rampage")}]},{label:"Melee Haste",effects:[{label:"Improved Icy Talons",actionId:D.fromSpellId(55610),playerData:or(n.ClassDeathknight,"improvedIcyTalons")},{label:"Improved Windfury Totem",actionId:D.fromSpellId(29193),playerData:or(n.ClassShaman,"improvedWindfuryTotem",(e=>e.getRotation().totems?.air==E.WindfuryTotem))},{label:"Windfury Totem",actionId:D.fromSpellId(65990),playerData:cr(n.ClassShaman,"improvedWindfuryTotem",(e=>e.getRotation().totems?.air==E.WindfuryTotem))}]},{label:"Spell Power",effects:[{label:"Demonic Pact",actionId:D.fromSpellId(47240),playerData:or(n.ClassWarlock,"demonicPact")},{label:"Totem of Wrath",actionId:D.fromSpellId(57722),playerData:or(n.ClassShaman,"totemOfWrath",(e=>e.getRotation().totems?.fire==k.TotemOfWrath))},{label:"Flametongue Totem",actionId:D.fromSpellId(58656),playerData:ir(n.ClassShaman,(e=>e.getRotation().totems?.fire==k.FlametongueTotem))}]},{label:"Spell Crit",effects:[{label:"Moonkin Form",actionId:D.fromSpellId(24907),playerData:pr(t.SpecBalanceDruid,"moonkinForm")},{label:"Elemental Oath",actionId:D.fromSpellId(51470),playerData:or(n.ClassShaman,"elementalOath")}]},{label:"Spell Haste",effects:[{label:"Wrath of Air Totem",actionId:D.fromSpellId(3738),playerData:ir(n.ClassShaman,(e=>e.getRotation().totems?.air==E.WrathOfAirTotem))}]},{label:"Health",effects:[{label:"Improved Commanding Shout",actionId:D.fromSpellId(12861),playerData:or(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutCommanding))},{label:"Commanding Shout",actionId:D.fromSpellId(47440),playerData:cr(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutCommanding))},{label:"Improved Imp",actionId:D.fromSpellId(18696),playerData:or(n.ClassWarlock,"improvedImp",(e=>e.getSpecOptions().summon==O.Imp))},{label:"Blood Pact",actionId:D.fromSpellId(47982),playerData:cr(n.ClassWarlock,"improvedImp",(e=>e.getSpecOptions().summon==O.Imp))}]},{label:"Replenishment",effects:[{label:"Vampiric Touch",actionId:D.fromSpellId(48160),playerData:pr(t.SpecShadowPriest,"vampiricTouch")},{label:"Judgements of the Wise",actionId:D.fromSpellId(31878),playerData:pr(t.SpecRetributionPaladin,"judgementsOfTheWise")},{label:"Hunting Party",actionId:D.fromSpellId(53292),playerData:pr(t.SpecHunter,"huntingParty")},{label:"Improved Soul Leech",actionId:D.fromSpellId(54118),playerData:pr(t.SpecWarlock,"improvedSoulLeech")},{label:"Enduring Winter",actionId:D.fromSpellId(44561),playerData:pr(t.SpecMage,"enduringWinter")}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:D.fromSpellId(29166),playerData:ir(n.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:D.fromSpellId(10060),playerData:or(n.ClassPriest,"powerInfusion")}]},{label:"Focus Magic",effects:[{label:"Focus Magic",actionId:D.fromSpellId(54648),playerData:or(n.ClassMage,"focusMagic")}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:D.fromSpellId(57933),playerData:ir(n.ClassRogue)}]},{label:"Unholy Frenzy",effects:[{label:"Unholy Frenzy",actionId:D.fromSpellId(49016),playerData:or(n.ClassDeathknight,"hysteria")}]},{label:"Pain Suppression",effects:[{label:"Pain Suppression",actionId:D.fromSpellId(33206),playerData:or(n.ClassPriest,"painSuppression")}]},{label:"Divine Guardian",effects:[{label:"Divine Guardian",actionId:D.fromSpellId(53530),playerData:or(n.ClassPaladin,"divineGuardian")}]}]},{label:"DPS Debuffs",categories:[{label:"Major ArP",effects:[{label:"Sunder Armor",actionId:D.fromSpellId(47467),playerData:ir(n.ClassWarrior,(e=>e.isSpec(t.SpecProtectionWarrior)||e.getRotation().sunderArmor==C.SunderArmorMaintain))},{label:"Expose Armor",actionId:D.fromSpellId(8647),playerData:ir(n.ClassRogue,(e=>e.getRotation().exposeArmorFrequency==R.Maintain))},{label:"Acid Spit",actionId:D.fromSpellId(55754),playerData:ir(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Worm))}]},{label:"Minor ArP",effects:[{label:"Faerie Fire",actionId:D.fromSpellId(770),playerData:ir(n.ClassDruid,(e=>e.spec==t.SpecFeralTankDruid||e.spec!=t.SpecRestorationDruid&&e.getRotation().maintainFaerieFire))},{label:"Curse of Weakness",actionId:D.fromSpellId(50511),playerData:ir(n.ClassWarlock,(e=>e.getRotation().curse==v.Weakness))},{label:"Sting",actionId:D.fromSpellId(56631),playerData:ir(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Wasp))},{label:"Spore Cloud",actionId:D.fromSpellId(53598),playerData:ir(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Bat))}]},{label:"Phys Vuln",effects:[{label:"Blood Frenzy",actionId:D.fromSpellId(29859),playerData:or(n.ClassWarrior,"bloodFrenzy")},{label:"Savage Combat",actionId:D.fromSpellId(58413),playerData:or(n.ClassRogue,"savageCombat")}]},{label:"Bleed",effects:[{label:"Mangle",actionId:D.fromSpellId(16862),playerData:ir(n.ClassDruid,(e=>[t.SpecFeralDruid,t.SpecFeralTankDruid].includes(e.spec)))},{label:"Trauma",actionId:D.fromSpellId(46855),playerData:or(n.ClassWarrior,"trauma")},{label:"Stampede",actionId:D.fromSpellId(57393),playerData:ir(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Rhino))}]},{label:"Crit",effects:[{label:"Totem of Wrath",actionId:D.fromSpellId(30706),playerData:or(n.ClassShaman,"totemOfWrath",(e=>e.getRotation().totems?.fire==k.TotemOfWrath))},{label:"Heart of the Crusader",actionId:D.fromSpellId(20337),playerData:or(n.ClassPaladin,"heartOfTheCrusader",(e=>[t.SpecRetributionPaladin,t.SpecProtectionPaladin].includes(e.spec)))},{label:"Master Poisoner",actionId:D.fromSpellId(58410),playerData:or(n.ClassRogue,"masterPoisoner")}]},{label:"Spell Crit",effects:[{label:"Improved Shadow Bolt",actionId:D.fromSpellId(17803),playerData:or(n.ClassWarlock,"improvedShadowBolt")},{label:"Improved Scorch",actionId:D.fromSpellId(12873),playerData:or(n.ClassMage,"improvedScorch",(e=>{const t=e.getRotation();return t.type==W.Fire&&t.maintainImprovedScorch}))},{label:"Winter's Chill",actionId:D.fromSpellId(28593),playerData:or(n.ClassMage,"wintersChill",(e=>e.getRotation().type==W.Frost))}]},{label:"Spell Hit",effects:[{label:"Misery",actionId:D.fromSpellId(33198),playerData:pr(t.SpecShadowPriest,"misery")},{label:"Improved Faerie Fire",actionId:D.fromSpellId(33602),playerData:pr(t.SpecBalanceDruid,"improvedFaerieFire")}]},{label:"Spell Dmg",effects:[{label:"Ebon Plaguebringer",actionId:D.fromSpellId(51161),playerData:or(n.ClassDeathknight,"ebonPlaguebringer")},{label:"Earth and Moon",actionId:D.fromSpellId(48511),playerData:pr(t.SpecBalanceDruid,"earthAndMoon")},{label:"Curse of Elements",actionId:D.fromSpellId(47865),playerData:ir(n.ClassWarlock,(e=>e.getRotation().curse==v.Elements))}]}]},{label:"Mitigation Debuffs",categories:[{label:"Atk Pwr",effects:[{label:"Vindication",actionId:D.fromSpellId(26016),playerData:or(n.ClassPaladin,"vindication",(e=>[t.SpecRetributionPaladin,t.SpecProtectionPaladin].includes(e.spec)))},{label:"Improved Demoralizing Shout",actionId:D.fromSpellId(12879),playerData:or(n.ClassWarrior,"improvedDemoralizingShout",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainDemoShout||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().demoShoutChoice))},{label:"Demoralizing Shout",actionId:D.fromSpellId(47437),playerData:cr(n.ClassWarrior,"improvedDemoralizingShout",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainDemoShout||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().demoShoutChoice))},{label:"Improved Demoralizing Roar",actionId:D.fromSpellId(16862),playerData:pr(t.SpecFeralTankDruid,"feralAggression",(e=>e.getRotation().maintainDemoralizingRoar))},{label:"Demoralizing Roar",actionId:D.fromSpellId(48560),playerData:(ur=t.SpecFeralTankDruid,gr="feralAggression",fr=e=>e.getRotation().maintainDemoralizingRoar,dr(ur,gr,!0,fr))},{label:"Improved Curse of Weakness",actionId:D.fromSpellId(18180),playerData:or(n.ClassWarlock,"improvedCurseOfWeakness",(e=>e.getRotation().curse==v.Weakness))},{label:"Curse of Weakness",actionId:D.fromSpellId(50511),playerData:or(n.ClassWarlock,"improvedCurseOfWeakness",(e=>e.getRotation().curse==v.Weakness))},{label:"Demoralizing Screech",actionId:D.fromSpellId(55487),playerData:ir(n.ClassHunter,(e=>e.getSpecOptions().petType==w.CarrionBird))}]},{label:"Atk Speed",effects:[{label:"Improved Thunder Clap",actionId:D.fromSpellId(12666),playerData:or(n.ClassWarrior,"improvedThunderClap",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainThunderClap||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().thunderClapChoice))},{label:"Thunder Clap",actionId:D.fromSpellId(47502),playerData:cr(n.ClassWarrior,"improvedThunderClap",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainThunderClap||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().thunderClapChoice))},{label:"Improved Frost Fever",actionId:D.fromSpellId(51456),playerData:or(n.ClassDeathknight,"improvedIcyTouch")},{label:"Frost Fever",actionId:D.fromSpellId(51456),playerData:cr(n.ClassDeathknight,"improvedIcyTouch")},{label:"Judgements of the Just",actionId:D.fromSpellId(53696),playerData:or(n.ClassPaladin,"judgementsOfTheJust")},{label:"Infected Wounds",actionId:D.fromSpellId(48485),playerData:or(n.ClassDruid,"infectedWounds",(e=>[t.SpecFeralDruid,t.SpecFeralTankDruid].includes(e.spec)))}]},{label:"Miss",effects:[{label:"Insect Swarm",actionId:D.fromSpellId(65855),playerData:pr(t.SpecBalanceDruid,"insectSwarm")},{label:"Scorpid Sting",actionId:D.fromSpellId(3043),playerData:ir(n.ClassHunter,(e=>e.getRotation().sting==T.ScorpidSting))}]}]}]};var ur,gr,fr;class yr extends ue{constructor(e,t){super(e,t,{identifier:"raid-tab",title:"Raid"}),this.simUI=t,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new Qs(this.leftPanel,this.simUI),new ar(this.leftPanel,this.simUI);const e=new ge(this.rightPanel,this.simUI,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:e=>M.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(e,t,a)=>{c.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(e,a.raid||L.create()),this.simUI.blessingsPicker.setAssignments(e,a.blessings||N.create()),a.faction&&this.simUI.sim.setFaction(e,a.faction),a.phase&&this.simUI.sim.setPhase(e,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(e,t)=>M.equals(e,t),toJson:e=>M.toJson(e),fromJson:e=>M.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}}class Sr extends G{constructor(e,t,a,s){super(e,"raid-target-picker-root",a,s),this.rootElem.classList.add("dropdown"),this.config=s,this.raid=t,this.curPlayer=this.raid.getPlayerFromRaidTarget(s.getValue(a)),this.curRaidTarget=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(e=>e.preventDefault())),this.currentOptions=[],this.updateOptions(c.nextEventID()),s.compChangeEmitter.on((e=>this.updateOptions(e))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((e=>null!=e)).map((e=>({player:e,isDropdown:!0})))]}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((e=>this.dropdownElem.appendChild(this.makeOption(e))));const t=this.curRaidTarget;this.curRaidTarget=this.getInputValue(),$.equals(t,this.curRaidTarget)?this.setInputValue(this.curRaidTarget):this.inputChanged(e)}makeOption(e){const t=Sr.makeOptionElem(e);return t.addEventListener("click",(t=>{t.preventDefault(),this.curPlayer=e.player,this.curRaidTarget=this.getInputValue(),this.inputChanged(c.nextEventID())})),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeRaidTarget():j()}setInputValue(e){this.curRaidTarget=$.clone(e),this.curPlayer=this.raid.getPlayerFromRaidTarget(this.curRaidTarget);const t=this.currentOptions.find((e=>e.player==this.curPlayer));t&&(this.buttonElem.innerHTML=Sr.makeOptionElem({player:t.player}).outerHTML)}static makeOptionElem(e){const t=e.player?m(e.player.getClass()):"";let a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${t?`bg-${t}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${e.player?`<img class="player-icon" src="${e.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${t?`text-${t}`:""}">\n\t\t\t\t\t\t\t${e.player?e.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,e.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class Ir extends l{constructor(e,t){super(e,"assignments-picker-root"),this.changeEmitter=new c,this.raidSimUI=t,this.innervatesPicker=new Pr(this.rootElem,t),this.powerInfusionsPicker=new Dr(this.rootElem,t),this.tricksOfTheTradesPicker=new kr(this.rootElem,t),this.unholyFrenzyPicker=new Er(this.rootElem,t),this.focusMagicsPicker=new Cr(this.rootElem,t)}}class br extends l{constructor(e,t){super(e,"assigned-buff-picker-root"),this.changeEmitter=new c,this.raidSimUI=t,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((e=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=e.map(((e,t)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);let s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Sr.makeOptionElem({player:e,isDropdown:!1})),a.appendChild(s);const r=document.createElement("i");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(r);const n=new Sr(a,this.raidSimUI.sim.raid,e,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,a)=>this.setPlayerValue(e,t,a)}),i={player:e,targetPicker:n,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromRaidTarget(n.getInputValue())};return n.changeEmitter.on((e=>{i.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromRaidTarget(n.getInputValue())})),i}))}}class Pr extends br{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassDruid)))}getPlayerValue(e){return e.getSpecOptions().innervateTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.innervateTarget=a,t.setSpecOptions(e,s)}}class Dr extends br{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassPriest)&&e.getTalents().powerInfusion))}getPlayerValue(e){return e.getSpecOptions().powerInfusionTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.powerInfusionTarget=a,t.setSpecOptions(e,s)}}class kr extends br{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassRogue)))}getPlayerValue(e){return e.getSpecOptions().tricksOfTheTradeTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.tricksOfTheTradeTarget=a,t.setSpecOptions(e,s)}}class Er extends br{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassDeathknight)&&e.getTalents().hysteria))}getPlayerValue(e){return e.getSpecOptions().unholyFrenzyTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.unholyFrenzyTarget=a,t.setSpecOptions(e,s)}}class Cr extends br{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassMage)))}getPlayerValue(e){return e.getSpecOptions().focusMagicTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.focusMagicTarget=a,t.setSpecOptions(e,s)}}class Rr extends l{constructor(e,t){super(e,"blessings-picker-root"),this.changeEmitter=new c,this.pickers=[],this.simUI=t,this.assignments=N.clone(V(4));const a=K.filter((e=>Xs.includes(e))).filter((e=>!ye.includes(e))),s=[...Array(4).keys()];a.map((e=>{const t=document.createElement("div");t.classList.add("blessings-picker-row"),this.rootElem.appendChild(t),t.append(this.buildSpecIcon(e));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),t.appendChild(a),s.forEach((t=>{this.pickers[t]||this.pickers.push([]);const s=new fe(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:q[n.ClassPaladin],value:z.BlessingUnknown},{actionId:D.fromSpellId(25898),value:z.BlessingOfKings},{actionId:D.fromSpellId(48934),value:z.BlessingOfMight},{actionId:D.fromSpellId(48938),value:z.BlessingOfWisdom},{actionId:D.fromSpellId(25899),value:z.BlessingOfSanctuary}],equals:(e,t)=>e==t,zeroValue:z.BlessingUnknown,enableWhen:e=>{const a=Math.min(this.simUI.getClassCount(n.ClassPaladin),4);return t<a},changedEvent:e=>e.changeEmitter,getValue:a=>a.assignments.paladins[t]?.blessings[e]||z.BlessingUnknown,setValue:(a,s,r)=>{s.assignments.paladins[t].blessings[e]!=r&&(s.assignments.paladins[t].blessings[e]=r,this.changeEmitter.emit(a))}});this.pickers[t].push(s)})),t})),this.updatePickers(),this.simUI.compChangeEmitter.on((e=>this.updatePickers()))}updatePickers(){for(let e=0;e<4;e++)this.pickers[e].forEach((e=>e.update()))}buildSpecIcon(t){let a=document.createElement("fragment");a.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${J[t]}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\tdata-bs-title="${i[t]}"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=a.querySelector(".blessings-spec-icon");return e.getOrCreateInstance(s),a.children[0]}getAssignments(){return N.clone(this.assignments)}setAssignments(e,t){this.assignments=N.clone(t),this.changeEmitter.emit(e)}}class wr extends l{constructor(e,t){super(e,"tanks-picker-root"),this.raidSimUI=t;const a=this.raidSimUI.sim.raid;for(let s=0;s<4;s++){const e=document.createElement("div");e.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(e);const t=document.createElement("label");t.textContent=0==s?"Main Tank":`Tank ${s+1}`,t.classList.add("tank-picker-label","form-label"),e.appendChild(t),new Sr(e,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[s]||j(),setValue:(e,t,a)=>{const r=t.getTanks();for(let n=0;n<s;n++)r[n]||r.push(j());r[s]=a,t.setTanks(e,r)}})}}}class vr extends ue{constructor(e,t){super(e,t,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=t,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildOtherSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const e=new Se(this.column1,"encounter-settings",{header:{title:"Encounter"}});new Ie(e.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const e=new Se(this.column1,"consumes-settings",{header:{title:"Consumables"}});let t=document.createElement("div");t.classList.add("consumes-container"),e.bodyElement.appendChild(t),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(37094),"scrollOfStamina"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(43466),"scrollOfStrength"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(43464),"scrollOfAgility"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(37092),"scrollOfIntellect"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(37098),"scrollOfSpirit"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(43468),"scrollOfProtection"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(49633),"drumsOfForgottenKings"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(49634),"drumsOfTheWild")}buildOtherSettings(){}buildTankSettings(){const e=new Se(this.column2,"tanks-settings",{header:{title:"Tanks"}});new wr(e.bodyElement,this.simUI)}buildAssignmentSettings(){const e=new Se(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new Ir(e.bodyElement,this.simUI)}buildBlessingsPicker(){const e=new Se(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:be}});this.simUI.blessingsPicker=new Rr(e.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((e=>this.simUI.changeEmitter.emit(e)))}buildSavedDataPickers(){const e=new ge(this.rightPanel,this.simUI,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:e=>_.create({encounter:e.toProto()}),setData:(e,t,a)=>t.fromProto(e,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(e,t)=>_.equals(e,t),toJson:e=>_.toJson(e),fromJson:e=>_.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}makeBooleanRaidIconBuffInput(e,t,a){const s=this.simUI.sim.raid;return new Pe(e,s,{id:t,states:2,changedEvent:e=>e.buffsChangeEmitter,getValue:e=>e.getBuffs()[a],setValue:(e,t,s)=>{const r=t.getBuffs();r[a]=s,t.setBuffs(e,r)}})}}class Tr extends De{constructor(e,t){super(e,t,"JSON Import",!0),this.simUI=t,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(e){const t=X.fromJsonString(e,{ignoreUnknownFields:!0});this.simUI.fromProto(c.nextEventID(),t),this.close()}}class Ur extends ke{constructor(e,t){super(e,t,"JSON Export",!0),this.simUI=t,this.init()}getData(){return JSON.stringify(X.toJson(this.simUI.toProto()),null,2)}}class Ar extends De{constructor(e,t){super(e,t,"WCL Import",!1),this.queryCounter=0,this.token="",this.simUI=t,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const e=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),t=await e.json();this.token=t.access_token}return this.token}async queryWCL(e){const t={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:t}),r=await s.json();if(r?.errors?.length){const t=r.errors.map((e=>e.message)).join("\n");throw new Error(`GraphQL error: ${t}\n\nQuery: ${e}`)}return console.debug(`WCL query: ${e}\n\nResult: ${JSON.stringify(r)}`),r}async parseURL(e){const t=e.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!t)throw new Error(`Invalid WCL URL ${e}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:t[1],fightID:""};if(t[2]&&t[3]&&"last"!=t[3])a.fightID=t[3];else{const e=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(e)).data.reportData.report.fights;"last"==t[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(e)}catch(t){alert("Failed import from WCL: "+t)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(e){if(!e.length)throw new Error("No import link provided!");const t=await this.parseURL(e);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${t.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${t.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${t.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${t.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[Fr,Wr].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${t.fightID}], dataType:Casts, filterExpression: "${[Br].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${t.fightID}], dataType:Healing, filterExpression: "${[xr,Mr].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${t.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,r=s.playerDetails.data.entries;c.freezeAllAndDo((()=>{const e=c.nextEventID(),t=r.map((t=>new Or(t,this.simUI,e)));this.inferRace(e,s,t),this.inferProfessions(e,s,t),this.inferAssignments(e,s,t),this.inferPartyComposition(e,s,t);const a=t.filter((e=>e.player.getClass()==n.ClassPaladin)).length,i=X.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(t),blessings:V(a)});this.simUI.clearRaid(e),this.simUI.fromProto(e,i)})),this.close()}inferRace(e,t,r){r.forEach((t=>t.player.setRace(e,s.RaceUnknown)));let n=t.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||a.Horde;t.combatantInfoEvents.data.forEach((t=>{t.auras.filter((e=>28878==e.ability)).forEach((t=>{const i=r.find((e=>e.id==t.source));i&&i.player.getRace()!=s.RaceDraenei&&(console.log(`Inferring player ${i.name} has race ${Q[s.RaceDraenei]} from Heroic Presence aura event`),i.player.setRace(e,s.RaceDraenei),n=a.Alliance)}))}));const i=Z(t.reportCastEvents.data,(e=>String(e.abilityGameID)));Fr.forEach((t=>{(i[t.id]||[]).forEach((a=>{const s=r.find((e=>e.id==a.sourceID));s&&(console.log(`Inferring player ${s.name} has race ${Q[t.race]} from ${t.name} event`),s.player.setRace(e,t.race),n=Y[t.race])}))})),r.forEach((t=>{t.player.getRace()==s.RaceUnknown&&t.player.setRace(e,t.preset.defaultFactionRaces[n])}))}inferProfessions(e,t,a){const s=Z(t.reportCastEvents.data,(e=>String(e.abilityGameID)));Wr.forEach((e=>{(s[e.id]||[]).forEach((t=>{const s=a.find((e=>e.id==t.sourceID));s&&!s.inferredProfessions.includes(e.profession)&&(console.log(`Inferring player ${s.name} has profession ${ee[e.profession]} from ${e.name} event`),s.inferredProfessions.push(e.profession))}))})),a.forEach((t=>{let a=te(t.inferredProfessions.concat(t.player.getGear().getProfessionRequirements()));0==a.length?a=[f.Engineering,f.Jewelcrafting]:1==a.length&&(a[0]!=f.Engineering?a.push(f.Engineering):a.push(f.Jewelcrafting)),t.player.setProfessions(e,a)}))}inferAssignments(e,t,a){const s=Z(t.fightCastEvents.data,(e=>String(e.abilityGameID)));Br.forEach((t=>{(s[t.id]||[]).forEach((s=>{const r=a.find((e=>e.id==s.sourceID)),n=a.find((e=>e.id==s.targetID));if(r&&n&&r.player.getClass()==t.class){const a=t.applyFunc(r.player,n.toRaidTarget());r.player.setSpecOptions(e,a),console.log(`Inferring player ${r.name} is targeting ${n.name} with ${t.name} from cast event`)}}))}))}inferPartyComposition(e,t,a){const s=(e,t,a)=>{(e.addPlayerInParty(t)||t.addPlayerInParty(e))&&console.log(`Inferring players ${e.name} and ${t.name} in same party from ${a} event`)},r=Z(t.fightHealEvents.data,(e=>String(e.abilityGameID)));xr.forEach((e=>{(r[e.id]||[]).forEach((t=>{const r=a.find((e=>e.id==t.sourceID)),n=a.find((e=>e.id==t.targetID));r&&n&&s(r,n,e.name)}))})),Mr.forEach((e=>{const t=r[e.id]||[],n=Z(t,(e=>String(e.timestamp)+String(e.sourceID)));for(const[r,i]of Object.entries(n)){const t=i.map((e=>a.find((t=>t.id==e.targetID))));for(let a=0;a<t.length;a++)for(let r=0;r<t.length;r++)a!=r&&t[a]&&t[r]&&s(t[a],t[r],e.name)}})),t.combatantInfoEvents.data.forEach((e=>{const t=a.find((t=>t.id==e.sourceID));e.auras.filter((e=>28878==e.ability)).forEach((e=>{const r=a.find((t=>t.id==e.source));r&&t&&s(r,t,"Heroic Presence")}))}));let n=a.filter((e=>e.playersInParty.length>0)),i=0;for(;n.length>0;){let e=[n[0]].concat(n[0].playersInParty),t=0;for(;e.length!=t;)t=e.length,e=te(e.map((e=>[e].concat(e.playersInParty))).flat());const a=i;i++,e.forEach(((e,t)=>{e.raidIndex=5*a+t})),n=n.filter((t=>!e.includes(t)))}const l=[...Array(40).keys()];a.filter((e=>-1==e.raidIndex)).forEach((e=>{const t=l.find((e=>!a.some((t=>t.raidIndex==e))))??-1;if(-1==t)throw new Error("Invalid next idx");e.raidIndex=t}))}getEncounterProto(e){const t=e.fights[0],a=ae.create({duration:(t.endTime-t.startTime)/1e3,targets:[]});let s=this.simUI.sim.db.getAllPresetEncounters().find((e=>e.path.includes(t.name)));return s&&s.targets.length&&s.targets.map((e=>e.target)).filter((e=>void 0!==e)).forEach((e=>a.targets.push(e))),0===a.targets.length&&a.targets.push(Ee.defaultProto()),a}getRaidProto(e){const t=L.create({parties:[...new Array(Ce).keys()].map((e=>se.create({players:[...new Array(5).keys()].map((e=>d.create()))})))});return e.forEach((e=>{const a=e.raidIndex%5,s=(e.raidIndex-a)/5,r=e.player.toProto();t.parties[s].players[a]=r,y(p(r))&&t.tanks.push(e.toRaidTarget())})),t}}class Or{constructor(e,t,a){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=t,this.data=e,this.name=e.name,this.id=e.id,this.type=e.type;const s=e.icon.split("-")[1];this.fullType=this.type+s,console.log(`WCL spec: ${this.fullType}`);const r=Hr[this.fullType]??null;if(null==r)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=r,this.player=new me(this.spec,t.sim),this.preset=Or.getMatchingPreset(r,e.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:e.talents}).toString());this.player.applySharedDefaults(a),this.player.setTalentsString(a,this.preset.talents.talentsString),this.player.setGlyphs(a,this.preset.talents.glyphs),this.player.setConsumes(a,this.preset.consumes),this.player.setRotation(a,this.preset.rotation),this.player.setSpecOptions(a,this.preset.specOptions),this.player.setProfessions(a,[f.Engineering,f.Jewelcrafting]),this.player.setName(a,e.name),this.player.setGear(a,t.sim.db.lookupEquipmentSpec(re.create({items:e.gear.map((e=>ne.create({id:e.id,enchant:e.permanentEnchant,gems:e.gems?e.gems.map((e=>e.id)):[]})))})))}static getMatchingPreset(e,t){const a=_s.filter((t=>t.spec==e));let s=0;if(a&&a.length>1){let e=999;a.forEach(((a,r)=>{const n=ie(a.talents.talentsString),i=n.reduce(((e,a,s)=>e+Math.abs(t[s]?.guid-n[s])),0);i<e&&(s=r,e=i)}))}return a[s]}toRaidTarget(){return $.create({targetIndex:this.raidIndex})}addPlayerInParty(e){return e!=this&&!this.playersInParty.includes(e)&&(this.playersInParty.push(e),!0)}}const Hr={DeathKnightBlood:t.SpecTankDeathknight,DeathKnightLichborne:t.SpecTankDeathknight,DeathKnightRuneblade:t.SpecDeathknight,DeathKnightFrost:t.SpecDeathknight,DeathKnightUnholy:t.SpecDeathknight,DruidBalance:t.SpecBalanceDruid,DruidFeral:t.SpecFeralDruid,DruidWarden:t.SpecFeralTankDruid,DruidGuardian:t.SpecFeralTankDruid,DruidRestoration:t.SpecRestorationDruid,HunterBeastMastery:t.SpecHunter,HunterSurvival:t.SpecHunter,HunterMarksmanship:t.SpecHunter,MageArcane:t.SpecMage,MageFire:t.SpecMage,MageFrost:t.SpecMage,PaladinHoly:t.SpecHolyPaladin,PaladinJusticar:t.SpecProtectionPaladin,PaladinProtection:t.SpecProtectionPaladin,PaladinRetribution:t.SpecRetributionPaladin,PriestHoly:t.SpecHealingPriest,PriestDiscipline:t.SpecHealingPriest,PriestShadow:t.SpecShadowPriest,PriestSmite:t.SpecSmitePriest,RogueAssassination:t.SpecRogue,RogueCombat:t.SpecRogue,RogueSubtlety:t.SpecRogue,ShamanElemental:t.SpecElementalShaman,ShamanEnhancement:t.SpecEnhancementShaman,ShamanRestoration:t.SpecRestorationShaman,WarlockDestruction:t.SpecWarlock,WarlockAffliction:t.SpecWarlock,WarlockDemonology:t.SpecWarlock,WarriorArms:t.SpecWarrior,WarriorFury:t.SpecWarrior,WarriorChampion:t.SpecWarrior,WarriorWarrior:t.SpecWarrior,WarriorGladiator:t.SpecWarrior,WarriorProtection:t.SpecProtectionWarrior},Fr=[{id:25046,name:"Arcane Torrent (Energy)",race:s.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:s.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:s.RaceBloodElf},{id:26297,name:"Berserking",race:s.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:s.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:s.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:s.RaceOrc},{id:20589,name:"Escape Artist",race:s.RaceGnome},{id:20594,name:"Stoneform",race:s.RaceDwarf},{id:20549,name:"War Stomp",race:s.RaceTauren},{id:7744,name:"Will of the Forsaken",race:s.RaceUndead},{id:59752,name:"Will to Survive",race:s.RaceHuman}],Wr=[{id:55503,name:"Lifeblood",profession:f.Herbalism},{id:50305,name:"Skinning",profession:f.Skinning}],Br=[{id:29166,name:"Innervate",class:n.ClassDruid,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.innervateTarget=t,a}},{id:10060,name:"Power Infusion",class:n.ClassPriest,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.powerInfusionTarget=t,a}},{id:57933,name:"Tricks of the Trade",class:n.ClassRogue,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.tricksOfTheTradeTarget=t,a}},{id:49016,name:"Unholy Frenzy",class:n.ClassDeathknight,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.unholyFrenzyTarget=t,a}}],xr=[{id:54172,name:"Divine Storm"},{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],Mr=[{id:48072,name:"Prayer of Healing"}],Lr=[];new class extends Re{constructor(e,t){super(e,new we,{cssScheme:"raid",spec:null,launchStatus:ve,knownIssues:(t.knownIssues||[]).concat(Lr)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new c,this.changeEmitter=new c,this.referenceChangeEmitter=new c,this.rootElem.classList.add("raid-sim-ui"),this.config=t,this.settingsMuuri=null,this.sim.raid.compChangeEmitter.on((e=>this.compChangeEmitter.emit(e))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((e=>this.modifyRaidProto(e))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab(),this.addLogTab()}loadSettings(){const e=c.nextEventID();c.freezeAllAndDo((()=>{let t=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=X.fromJsonString(a);this.fromProto(e,s),t=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}t||this.applyDefaults(e),this.changeEmitter.on((e=>{const t=X.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),t)}))}))}addSidebarComponents(){this.raidSimResultsManager=le(this),this.raidSimResultsManager.changeEmitter.on((e=>this.referenceChangeEmitter.emit(e)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(e=>new Tr(e,this))),this.simHeader.addImportLink("WCL",(e=>new Ar(e,this))),this.simHeader.addExportLink("JSON",(e=>new Ur(e,this)))}addRaidTab(){new yr(this.simTabContentsContainer,this)}addSettingsTab(){new vr(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new oe(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}addLogTab(){this.addTab("Log","log-tab",'\n\t\t\t<div class="log-runner">\n\t\t\t</div>\n\t\t'),new Te(this.rootElem.getElementsByClassName("log-runner")[0],this)}recomputeSettingsLayout(){this.settingsMuuri,window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){const t=this.getClassCount(n.ClassPaladin),a=this.blessingsPicker.getAssignments();Xs.forEach((s=>{const r=e.parties.map((e=>e.players.filter((e=>e.class!=n.ClassUnknown&&p(e)==s)))).flat();a.paladins.forEach(((e,a)=>{a>=t||(e.blessings[s]==z.BlessingOfKings?r.forEach((e=>e.buffs.blessingOfKings=!0)):e.blessings[s]==z.BlessingOfMight?r.forEach((e=>e.buffs.blessingOfMight=ce.TristateEffectImproved)):e.blessings[s]==z.BlessingOfWisdom?r.forEach((e=>e.buffs.blessingOfWisdom=ce.TristateEffectImproved)):e.blessings[s]==z.BlessingOfSanctuary&&r.forEach((e=>e.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(e){return this.getActivePlayers().filter((t=>t.isClass(e))).length}applyDefaults(e){c.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,L.create({numActiveParties:5})),this.sim.setPhase(e,1),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)}))}toProto(){return X.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const t=X.toBinary(e),a=pako.deflate(t,{to:"string"}),s=btoa(String.fromCharCode(...a)),r=new URL(window.location.href);return r.hash=s,r.toString()}fromProto(e,t){c.freezeAllAndDo((()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||L.create()),this.sim.encounter.fromProto(e,t.encounter||ae.create()),this.blessingsPicker.setAssignments(e,t.blessings||N.create())}))}clearRaid(e){this.sim.raid.clear(e)}getStorageKey(e){return"__wotlk_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-f5976f5a.entry.js.map
